parameter (or (or (or (or (pair %burn (int %amount) (address %fromAddr)) (or (nat %claimSale) (pair %cvrDrop (list %addresses address) (int %amount)))) (or (pair %dispatchRoyalties (list %addresses address) (nat %amount)) (or (address %getAdministrator) (pair %getBalance (address %owner) (address %target))))) (or (or (address %getCirculatingSupply) (or (address %getFactor) (address %getManager))) (or (or (address %getSaleLimit) (address %getSaleStatus)) (or (address %getSoldToken) (address %getSupplyLimit))))) (or (or (or (address %getTransferStatus) (or (int %increaseSaleLimit) (address %lockAddress))) (or (or (pair %mint (int %amount) (address %toAddr)) (pair %offchainSale (address %address) (int %amount))) (or (unit %pauseSale) (unit %pauseTransfer)))) (or (or (unit %resumeSale) (or (unit %resumeTransfer) (unit %sale))) (or (or (address %setAdministrator) (address %setManager)) (or (pair %transfer (int %amount) (pair (address %fromAddr) (address %toAddr))) (address %unlockAddress))))));
storage   (pair (pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))));
code
  {
    DUP;        # pair @parameter @storage : pair @parameter @storage
    CDR;        # @storage : pair @parameter @storage
    SWAP;       # pair @parameter @storage : @storage
    CAR;        # @parameter : @storage
    IF_LEFT
      {
        IF_LEFT
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    # Entry point: burn # @parameter%burn : @storage
                    # sp.verify(params.fromAddr == sp.sender) # @parameter%burn : @storage
                    DUP;        # @parameter%burn : @parameter%burn : @storage
                    CDR;        # address : @parameter%burn : @storage
                    SENDER;     # address : address : @parameter%burn : @storage
                    COMPARE;    # int : @parameter%burn : @storage
                    EQ;         # bool : @parameter%burn : @storage
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: params.fromAddr == sp.sender"; # string : @parameter%burn : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%burn : @storage
                    # sp.verify(self.data.balances.contains(params.fromAddr)) # @parameter%burn : @storage
                    SWAP;       # @storage : @parameter%burn
                    DUP;        # @storage : @storage : @parameter%burn
                    DUG 2;      # @storage : @parameter%burn : @storage
                    CAAADR;     # big_map address (pair (int %balance) (bool %lock)) : @parameter%burn : @storage
                    SWAP;       # @parameter%burn : big_map address (pair (int %balance) (bool %lock)) : @storage
                    DUP;        # @parameter%burn : @parameter%burn : big_map address (pair (int %balance) (bool %lock)) : @storage
                    DUG 2;      # @parameter%burn : big_map address (pair (int %balance) (bool %lock)) : @parameter%burn : @storage
                    CDR;        # address : big_map address (pair (int %balance) (bool %lock)) : @parameter%burn : @storage
                    MEM;        # bool : @parameter%burn : @storage
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: self.data.balances.contains(params.fromAddr)"; # string : @parameter%burn : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%burn : @storage
                    # sp.verify(self.data.balances[params.fromAddr].balance >= params.amount) # @parameter%burn : @storage
                    DUP;        # @parameter%burn : @parameter%burn : @storage
                    CAR;        # int : @parameter%burn : @storage
                    DIG 2;      # @storage : int : @parameter%burn
                    DUP;        # @storage : @storage : int : @parameter%burn
                    DUG 3;      # @storage : int : @parameter%burn : @storage
                    CAAADR;     # big_map address (pair (int %balance) (bool %lock)) : int : @parameter%burn : @storage
                    DIG 2;      # @parameter%burn : big_map address (pair (int %balance) (bool %lock)) : int : @storage
                    DUP;        # @parameter%burn : @parameter%burn : big_map address (pair (int %balance) (bool %lock)) : int : @storage
                    DUG 3;      # @parameter%burn : big_map address (pair (int %balance) (bool %lock)) : int : @parameter%burn : @storage
                    CDR;        # address : big_map address (pair (int %balance) (bool %lock)) : int : @parameter%burn : @storage
                    GET;        # option (pair (int %balance) (bool %lock)) : int : @parameter%burn : @storage
                    IF_SOME
                      {
                        # of_some: Get-item:23 # @some : int : @parameter%burn : @storage
                      }
                      {
                        PUSH string "Get-item:23"; # string : int : @parameter%burn : @storage
                        FAILWITH;   # FAILED
                      }; # @some : int : @parameter%burn : @storage
                    CAR;        # int : int : @parameter%burn : @storage
                    COMPARE;    # int : @parameter%burn : @storage
                    GE;         # bool : @parameter%burn : @storage
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: self.data.balances[params.fromAddr].balance >= params.amount"; # string : @parameter%burn : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%burn : @storage
                    # self.data.balances[params.fromAddr].balance -= params.amount # @parameter%burn : @storage
                    SWAP;       # @storage : @parameter%burn
                    DUP;        # @storage : @storage : @parameter%burn
                    DUG 2;      # @storage : @parameter%burn : @storage
                    DUP;        # @storage : @storage : @parameter%burn : @storage
                    CDR;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage : @parameter%burn : @storage
                    SWAP;       # @storage : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    CAR;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    DUP;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    CDR;        # pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    SWAP;       # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    CAR;        # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    DUP;        # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    CDR;        # pair (int %circulatingSupply) (address %covir) : pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    SWAP;       # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    CAR;        # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    DUP;        # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    CAR;        # address : pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    SWAP;       # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    CDR;        # big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    DUP;        # big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    DIG 6;      # @parameter%burn : big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                    DUP;        # @parameter%burn : @parameter%burn : big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                    DUG 7;      # @parameter%burn : big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    CDR;        # address : big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    DUP;        # address : address : big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    DUG 2;      # address : big_map address (pair (int %balance) (bool %lock)) : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    GET;        # option (pair (int %balance) (bool %lock)) : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    IF_SOME
                      {
                        # of_some: set_in_top-any # @some : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                      }
                      {
                        PUSH string "set_in_top-any"; # string : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                        FAILWITH;   # FAILED
                      }; # @some : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    CDR;        # bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    DIG 7;      # @parameter%burn : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                    DUP;        # @parameter%burn : @parameter%burn : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                    DUG 8;      # @parameter%burn : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    CAR;        # int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    DIG 9;      # @storage : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn
                    DUP;        # @storage : @storage : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn
                    DUG 10;     # @storage : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    CAAADR;     # big_map address (pair (int %balance) (bool %lock)) : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    DIG 9;      # @parameter%burn : big_map address (pair (int %balance) (bool %lock)) : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                    DUP;        # @parameter%burn : @parameter%burn : big_map address (pair (int %balance) (bool %lock)) : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                    DUG 10;     # @parameter%burn : big_map address (pair (int %balance) (bool %lock)) : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    CDR;        # address : big_map address (pair (int %balance) (bool %lock)) : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    GET;        # option (pair (int %balance) (bool %lock)) : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    IF_SOME
                      {
                        # of_some: Get-item:23 # @some : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                      }
                      {
                        PUSH string "Get-item:23"; # string : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                        FAILWITH;   # FAILED
                      }; # @some : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    CAR;        # int : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    SUB;        # int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    PAIR;       # pair int bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    SOME;       # option (pair int bool) : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    SWAP;       # address : option (pair int bool) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    UPDATE;     # big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    SWAP;       # address : big_map address (pair int bool) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    PAIR;       # pair address (big_map address (pair int bool)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    PAIR;       # pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    PAIR;       # pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : @storage
                    PAIR;       # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%burn : @storage
                    DUG 2;      # @parameter%burn : @storage : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    SWAP;       # @storage : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    DROP;       # @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    # self.data.circulatingSupply -= params.amount # @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    SWAP;       # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%burn
                    DUP;        # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%burn
                    DUG 2;      # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    DUP;        # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    CDR;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    SWAP;       # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    CAR;        # pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    DUP;        # pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    CDR;        # pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    SWAP;       # pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    CAR;        # pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    DUP;        # pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    CAR;        # pair address (big_map address (pair int bool)) : pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    SWAP;       # pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    CDDR;       # address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    DIG 4;      # @parameter%burn : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    DUP;        # @parameter%burn : @parameter%burn : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    DUG 5;      # @parameter%burn : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    CAR;        # int : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    DIG 6;      # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : int : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn
                    DUP;        # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : int : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn
                    DUG 7;      # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : int : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    CAADAR;     # int : int : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    SUB;        # int : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    PAIR;       # pair int address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    SWAP;       # pair address (big_map address (pair int bool)) : pair int address : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    PAIR;       # pair (pair address (big_map address (pair int bool))) (pair int address) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    PAIR;       # pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    PAIR;       # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    DUG 2;      # @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    SWAP;       # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    DROP;       # @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    # self.data.supplyLimit -= params.amount # @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    SWAP;       # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%burn
                    DUP;        # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%burn
                    DUG 2;      # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    DUP;        # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    CAR;        # pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    SWAP;       # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    CDR;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    DUP;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    CAR;        # pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    SWAP;       # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    CDR;        # pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    DUP;        # pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    CDR;        # pair (string %tokenSymbol) (bool %transferStatus) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    SWAP;       # pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (string %tokenSymbol) (bool %transferStatus) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    CADR;       # string : pair (string %tokenSymbol) (bool %transferStatus) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    DIG 4;      # @parameter%burn : string : pair (string %tokenSymbol) (bool %transferStatus) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    DUP;        # @parameter%burn : @parameter%burn : string : pair (string %tokenSymbol) (bool %transferStatus) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    DUG 5;      # @parameter%burn : string : pair (string %tokenSymbol) (bool %transferStatus) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    CAR;        # int : string : pair (string %tokenSymbol) (bool %transferStatus) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    DIG 6;      # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : int : string : pair (string %tokenSymbol) (bool %transferStatus) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%burn
                    DUP;        # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : int : string : pair (string %tokenSymbol) (bool %transferStatus) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%burn
                    DUG 7;      # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : int : string : pair (string %tokenSymbol) (bool %transferStatus) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    CDDAAR;     # int : int : string : pair (string %tokenSymbol) (bool %transferStatus) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    SUB;        # int : string : pair (string %tokenSymbol) (bool %transferStatus) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    PAIR;       # pair int string : pair (string %tokenSymbol) (bool %transferStatus) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    PAIR;       # pair (pair int string) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    SWAP;       # pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair int string) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    PAIR;       # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair int string) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    SWAP;       # pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair int string) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    PAIR;       # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair int string) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    DUG 2;      # @parameter%burn : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair int string) (pair (string %tokenSymbol) (bool %transferStatus))))
                    DROP 2;     # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair int string) (pair (string %tokenSymbol) (bool %transferStatus))))
                    NIL operation; # list operation : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair int string) (pair (string %tokenSymbol) (bool %transferStatus))))
                  }
                  {
                    IF_LEFT
                      {
                        # Entry point: claimSale # @parameter%claimSale : @storage
                        # sp.verify(sp.sender == self.data.administrator) # @parameter%claimSale : @storage
                        SWAP;       # @storage : @parameter%claimSale
                        DUP;        # @storage : @storage : @parameter%claimSale
                        DUG 2;      # @storage : @parameter%claimSale : @storage
                        CAAAAR;     # address : @parameter%claimSale : @storage
                        SENDER;     # address : address : @parameter%claimSale : @storage
                        COMPARE;    # int : @parameter%claimSale : @storage
                        EQ;         # bool : @parameter%claimSale : @storage
                        IF
                          {}
                          {
                            PUSH string "WrongCondition: sp.sender == self.data.administrator"; # string : @parameter%claimSale : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%claimSale : @storage
                        # sp.verify(sp.balance > sp.mutez(params.amount)) # @parameter%claimSale : @storage
                        DUP;        # @parameter%claimSale : @parameter%claimSale : @storage
                        PUSH mutez 1; # mutez : @parameter%claimSale : @parameter%claimSale : @storage
                        MUL;        # mutez : @parameter%claimSale : @storage
                        BALANCE;    # mutez : mutez : @parameter%claimSale : @storage
                        COMPARE;    # int : @parameter%claimSale : @storage
                        GT;         # bool : @parameter%claimSale : @storage
                        IF
                          {}
                          {
                            PUSH string "WrongCondition: sp.balance > sp.mutez(params.amount)"; # string : @parameter%claimSale : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%claimSale : @storage
                        # sp.send(self.data.octopus, sp.mutez((params.amount // 100) * 75)) # @parameter%claimSale : @storage
                        NIL operation; # list operation : @parameter%claimSale : @storage
                        DIG 2;      # @storage : list operation : @parameter%claimSale
                        DUP;        # @storage : @storage : list operation : @parameter%claimSale
                        DUG 3;      # @storage : list operation : @parameter%claimSale : @storage
                        CADADR;     # address : list operation : @parameter%claimSale : @storage
                        CONTRACT unit; # option (contract unit) : list operation : @parameter%claimSale : @storage
                        IF_SOME
                          {}
                          {
                            PUSH unit Unit; # unit : list operation : @parameter%claimSale : @storage
                            FAILWITH;   # FAILED
                          }; # @some : list operation : @parameter%claimSale : @storage
                        PUSH mutez 1; # mutez : @some : list operation : @parameter%claimSale : @storage
                        PUSH nat 75; # nat : mutez : @some : list operation : @parameter%claimSale : @storage
                        PUSH nat 100; # nat : nat : mutez : @some : list operation : @parameter%claimSale : @storage
                        DIG 5;      # @parameter%claimSale : nat : nat : mutez : @some : list operation : @storage
                        DUP;        # @parameter%claimSale : @parameter%claimSale : nat : nat : mutez : @some : list operation : @storage
                        DUG 6;      # @parameter%claimSale : nat : nat : mutez : @some : list operation : @parameter%claimSale : @storage
                        EDIV;       # option (pair nat nat) : nat : mutez : @some : list operation : @parameter%claimSale : @storage
                        IF_SOME
                          {
                            CAR;        # nat : nat : mutez : @some : list operation : @parameter%claimSale : @storage
                          }
                          {
                            PUSH string "division by zero"; # string : nat : mutez : @some : list operation : @parameter%claimSale : @storage
                            FAILWITH;   # FAILED
                          }; # nat : nat : mutez : @some : list operation : @parameter%claimSale : @storage
                        MUL;        # nat : mutez : @some : list operation : @parameter%claimSale : @storage
                        MUL;        # mutez : @some : list operation : @parameter%claimSale : @storage
                        PUSH unit Unit; # unit : mutez : @some : list operation : @parameter%claimSale : @storage
                        TRANSFER_TOKENS; # operation : list operation : @parameter%claimSale : @storage
                        CONS;       # list operation : @parameter%claimSale : @storage
                        # sp.send(self.data.covir, sp.mutez((params.amount // 100) * 25)) # list operation : @parameter%claimSale : @storage
                        DUP;        # list operation : list operation : @parameter%claimSale : @storage
                        DIG 3;      # @storage : list operation : list operation : @parameter%claimSale
                        DUP;        # @storage : @storage : list operation : list operation : @parameter%claimSale
                        DUG 4;      # @storage : list operation : list operation : @parameter%claimSale : @storage
                        CAADDR;     # address : list operation : list operation : @parameter%claimSale : @storage
                        CONTRACT unit; # option (contract unit) : list operation : list operation : @parameter%claimSale : @storage
                        IF_SOME
                          {}
                          {
                            PUSH unit Unit; # unit : list operation : list operation : @parameter%claimSale : @storage
                            FAILWITH;   # FAILED
                          }; # @some : list operation : list operation : @parameter%claimSale : @storage
                        PUSH mutez 1; # mutez : @some : list operation : list operation : @parameter%claimSale : @storage
                        PUSH nat 25; # nat : mutez : @some : list operation : list operation : @parameter%claimSale : @storage
                        PUSH nat 100; # nat : nat : mutez : @some : list operation : list operation : @parameter%claimSale : @storage
                        DIG 6;      # @parameter%claimSale : nat : nat : mutez : @some : list operation : list operation : @storage
                        DUP;        # @parameter%claimSale : @parameter%claimSale : nat : nat : mutez : @some : list operation : list operation : @storage
                        DUG 7;      # @parameter%claimSale : nat : nat : mutez : @some : list operation : list operation : @parameter%claimSale : @storage
                        EDIV;       # option (pair nat nat) : nat : mutez : @some : list operation : list operation : @parameter%claimSale : @storage
                        IF_SOME
                          {
                            CAR;        # nat : nat : mutez : @some : list operation : list operation : @parameter%claimSale : @storage
                          }
                          {
                            PUSH string "division by zero"; # string : nat : mutez : @some : list operation : list operation : @parameter%claimSale : @storage
                            FAILWITH;   # FAILED
                          }; # nat : nat : mutez : @some : list operation : list operation : @parameter%claimSale : @storage
                        MUL;        # nat : mutez : @some : list operation : list operation : @parameter%claimSale : @storage
                        MUL;        # mutez : @some : list operation : list operation : @parameter%claimSale : @storage
                        PUSH unit Unit; # unit : mutez : @some : list operation : list operation : @parameter%claimSale : @storage
                        TRANSFER_TOKENS; # operation : list operation : list operation : @parameter%claimSale : @storage
                        CONS;       # list operation : list operation : @parameter%claimSale : @storage
                        SWAP;       # list operation : list operation : @parameter%claimSale : @storage
                        DROP;       # list operation : @parameter%claimSale : @storage
                        SWAP;       # @parameter%claimSale : list operation : @storage
                        DROP;       # list operation : @storage
                      }
                      {
                        # Entry point: cvrDrop # @parameter%cvrDrop : @storage
                        # sp.verify(sp.sender == self.data.administrator) # @parameter%cvrDrop : @storage
                        SWAP;       # @storage : @parameter%cvrDrop
                        DUP;        # @storage : @storage : @parameter%cvrDrop
                        DUG 2;      # @storage : @parameter%cvrDrop : @storage
                        CAAAAR;     # address : @parameter%cvrDrop : @storage
                        SENDER;     # address : address : @parameter%cvrDrop : @storage
                        COMPARE;    # int : @parameter%cvrDrop : @storage
                        EQ;         # bool : @parameter%cvrDrop : @storage
                        IF
                          {}
                          {
                            PUSH string "WrongCondition: sp.sender == self.data.administrator"; # string : @parameter%cvrDrop : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%cvrDrop : @storage
                        # sp.verify((((params.amount * (sp.to_int(sp.len(params.addresses)))) + (self.data.saleLimit - self.data.soldToken)) + self.data.circulatingSupply) <= self.data.supplyLimit) # @parameter%cvrDrop : @storage
                        SWAP;       # @storage : @parameter%cvrDrop
                        DUP;        # @storage : @storage : @parameter%cvrDrop
                        DUG 2;      # @storage : @parameter%cvrDrop : @storage
                        CDDAAR;     # int : @parameter%cvrDrop : @storage
                        DIG 2;      # @storage : int : @parameter%cvrDrop
                        DUP;        # @storage : @storage : int : @parameter%cvrDrop
                        DUG 3;      # @storage : int : @parameter%cvrDrop : @storage
                        CAADAR;     # int : int : @parameter%cvrDrop : @storage
                        DIG 3;      # @storage : int : int : @parameter%cvrDrop
                        DUP;        # @storage : @storage : int : int : @parameter%cvrDrop
                        DUG 4;      # @storage : int : int : @parameter%cvrDrop : @storage
                        CDADDR;     # int : int : int : @parameter%cvrDrop : @storage
                        DIG 4;      # @storage : int : int : int : @parameter%cvrDrop
                        DUP;        # @storage : @storage : int : int : int : @parameter%cvrDrop
                        DUG 5;      # @storage : int : int : int : @parameter%cvrDrop : @storage
                        CDAAAR;     # int : int : int : int : @parameter%cvrDrop : @storage
                        SUB;        # int : int : int : @parameter%cvrDrop : @storage
                        DIG 3;      # @parameter%cvrDrop : int : int : int : @storage
                        DUP;        # @parameter%cvrDrop : @parameter%cvrDrop : int : int : int : @storage
                        DUG 4;      # @parameter%cvrDrop : int : int : int : @parameter%cvrDrop : @storage
                        CAR;        # list address : int : int : int : @parameter%cvrDrop : @storage
                        SIZE;       # nat : int : int : int : @parameter%cvrDrop : @storage
                        INT;        # int : int : int : int : @parameter%cvrDrop : @storage
                        DIG 4;      # @parameter%cvrDrop : int : int : int : int : @storage
                        DUP;        # @parameter%cvrDrop : @parameter%cvrDrop : int : int : int : int : @storage
                        DUG 5;      # @parameter%cvrDrop : int : int : int : int : @parameter%cvrDrop : @storage
                        CDR;        # int : int : int : int : int : @parameter%cvrDrop : @storage
                        MUL;        # int : int : int : int : @parameter%cvrDrop : @storage
                        ADD;        # int : int : int : @parameter%cvrDrop : @storage
                        ADD;        # int : int : @parameter%cvrDrop : @storage
                        COMPARE;    # int : @parameter%cvrDrop : @storage
                        LE;         # bool : @parameter%cvrDrop : @storage
                        IF
                          {}
                          {
                            PUSH string "WrongCondition: (((params.amount * (sp.to_int(sp.len(params.addresses)))) + (self.data.saleLimit - self.data.soldToken)) + self.data.circulatingSupply) <= self.data.supplyLimit"; # string : @parameter%cvrDrop : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%cvrDrop : @storage
                        # for address in params.addresses: ... # @parameter%cvrDrop : @storage
                        DUP;        # @parameter%cvrDrop : @parameter%cvrDrop : @storage
                        CAR;        # list address : @parameter%cvrDrop : @storage
                        ITER
                          {
                            # if ~ (self.data.balances.contains(address)): # address : @parameter%cvrDrop : @storage
                            DIG 2;      # @storage : address : @parameter%cvrDrop
                            DUP;        # @storage : @storage : address : @parameter%cvrDrop
                            DUG 3;      # @storage : address : @parameter%cvrDrop : @storage
                            CAAADR;     # big_map address (pair (int %balance) (bool %lock)) : address : @parameter%cvrDrop : @storage
                            SWAP;       # address : big_map address (pair (int %balance) (bool %lock)) : @parameter%cvrDrop : @storage
                            DUP;        # address : address : big_map address (pair (int %balance) (bool %lock)) : @parameter%cvrDrop : @storage
                            DUG 2;      # address : big_map address (pair (int %balance) (bool %lock)) : address : @parameter%cvrDrop : @storage
                            MEM;        # bool : address : @parameter%cvrDrop : @storage
                            IF
                              {}
                              {
                                # self.data.balances[address] = sp.record(balance = 0, lock = False) # address : @parameter%cvrDrop : @storage
                                DIG 2;      # @storage : address : @parameter%cvrDrop
                                DUP;        # @storage : @storage : address : @parameter%cvrDrop
                                DUG 3;      # @storage : address : @parameter%cvrDrop : @storage
                                DUP;        # @storage : @storage : address : @parameter%cvrDrop : @storage
                                CDR;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage : address : @parameter%cvrDrop : @storage
                                SWAP;       # @storage : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                                CAR;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                                DUP;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                                CDR;        # pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                                SWAP;       # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                                CAR;        # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                                DUP;        # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                                CDR;        # pair (int %circulatingSupply) (address %covir) : pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                                SWAP;       # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                                CAR;        # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                                DUP;        # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                                CAR;        # address : pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                                SWAP;       # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                                CDR;        # big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                                PUSH (option (pair (int %balance) (bool %lock))) (Some (Pair 0 False)); # option (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                                DIG 6;      # address : option (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%cvrDrop : @storage
                                DUP;        # address : address : option (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%cvrDrop : @storage
                                DUG 7;      # address : option (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                                UPDATE;     # big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                                SWAP;       # address : big_map address (pair (int %balance) (bool %lock)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                                PAIR;       # pair address (big_map address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                                PAIR;       # pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                                PAIR;       # pair (pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                                PAIR;       # pair (pair (pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : address : @parameter%cvrDrop : @storage
                                DUG 3;      # address : @parameter%cvrDrop : @storage : pair (pair (pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                                DIG 2;      # @storage : address : @parameter%cvrDrop : pair (pair (pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                                DROP;       # address : @parameter%cvrDrop : pair (pair (pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                              }; # address : @parameter%cvrDrop : @storage
                            # self.data.balances[address].balance += params.amount # address : @parameter%cvrDrop : @storage
                            DIG 2;      # @storage : address : @parameter%cvrDrop
                            DUP;        # @storage : @storage : address : @parameter%cvrDrop
                            DUG 3;      # @storage : address : @parameter%cvrDrop : @storage
                            DUP;        # @storage : @storage : address : @parameter%cvrDrop : @storage
                            CDR;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage : address : @parameter%cvrDrop : @storage
                            SWAP;       # @storage : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            CAR;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            DUP;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            CDR;        # pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            SWAP;       # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            CAR;        # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            DUP;        # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            CDR;        # pair (int %circulatingSupply) (address %covir) : pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            SWAP;       # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            CAR;        # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            DUP;        # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            CAR;        # address : pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            SWAP;       # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            CDR;        # big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            DUP;        # big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            DIG 6;      # address : big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%cvrDrop : @storage
                            DUP;        # address : address : big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%cvrDrop : @storage
                            DUG 7;      # address : big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            DUP;        # address : address : big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            DUG 2;      # address : big_map address (pair (int %balance) (bool %lock)) : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            GET;        # option (pair (int %balance) (bool %lock)) : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            IF_SOME
                              {
                                # of_some: set_in_top-any # @some : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                              }
                              {
                                PUSH string "set_in_top-any"; # string : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                                FAILWITH;   # FAILED
                              }; # @some : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            CDR;        # bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            DIG 8;      # @parameter%cvrDrop : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @storage
                            DUP;        # @parameter%cvrDrop : @parameter%cvrDrop : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @storage
                            DUG 9;      # @parameter%cvrDrop : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            CDR;        # int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            DIG 10;     # @storage : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop
                            DUP;        # @storage : @storage : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop
                            DUG 11;     # @storage : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            CAAADR;     # big_map address (pair (int %balance) (bool %lock)) : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            DIG 3;      # address : big_map address (pair (int %balance) (bool %lock)) : int : bool : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            DUP;        # address : address : big_map address (pair (int %balance) (bool %lock)) : int : bool : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            DUG 4;      # address : big_map address (pair (int %balance) (bool %lock)) : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            GET;        # option (pair (int %balance) (bool %lock)) : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            IF_SOME
                              {
                                # of_some: Get-item:126 # @some : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                              }
                              {
                                PUSH string "Get-item:126"; # string : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                                FAILWITH;   # FAILED
                              }; # @some : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            CAR;        # int : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            ADD;        # int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            PAIR;       # pair int bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            SOME;       # option (pair int bool) : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            SWAP;       # address : option (pair int bool) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            UPDATE;     # big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            SWAP;       # address : big_map address (pair int bool) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            PAIR;       # pair address (big_map address (pair int bool)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            PAIR;       # pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            PAIR;       # pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : @storage
                            PAIR;       # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : address : @parameter%cvrDrop : @storage
                            DUG 3;      # address : @parameter%cvrDrop : @storage : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            DIG 2;      # @storage : address : @parameter%cvrDrop : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            DROP;       # address : @parameter%cvrDrop : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            # self.data.circulatingSupply += params.amount # address : @parameter%cvrDrop : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            DIG 2;      # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : address : @parameter%cvrDrop
                            DUP;        # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : address : @parameter%cvrDrop
                            DUG 3;      # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : address : @parameter%cvrDrop : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            DUP;        # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : address : @parameter%cvrDrop : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            CDR;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : address : @parameter%cvrDrop : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            SWAP;       # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            CAR;        # pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            DUP;        # pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            CDR;        # pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            SWAP;       # pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            CAR;        # pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            DUP;        # pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            CAR;        # pair address (big_map address (pair int bool)) : pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            SWAP;       # pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            CDDR;       # address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            DIG 5;      # @parameter%cvrDrop : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            DUP;        # @parameter%cvrDrop : @parameter%cvrDrop : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            DUG 6;      # @parameter%cvrDrop : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            CDR;        # int : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            DIG 7;      # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : int : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop
                            DUP;        # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : int : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop
                            DUG 8;      # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : int : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            CAADAR;     # int : int : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            ADD;        # int : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            PAIR;       # pair int address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            SWAP;       # pair address (big_map address (pair int bool)) : pair int address : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            PAIR;       # pair (pair address (big_map address (pair int bool))) (pair int address) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            PAIR;       # pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : address : @parameter%cvrDrop : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            PAIR;       # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : address : @parameter%cvrDrop : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            DUG 3;      # address : @parameter%cvrDrop : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            DROP;       # @parameter%cvrDrop : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            SWAP;       # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%cvrDrop : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            DROP;       # @parameter%cvrDrop : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                          }; # @parameter%cvrDrop : @storage
                        DROP;       # @storage
                        NIL operation; # list operation : @storage
                      }; # list operation : @storage
                  }; # list operation : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair int string) (pair (string %tokenSymbol) (bool %transferStatus))))
              }
              {
                IF_LEFT
                  {
                    # Entry point: dispatchRoyalties # @parameter%dispatchRoyalties : @storage
                    # sp.verify(sp.sender == self.data.administrator) # @parameter%dispatchRoyalties : @storage
                    SWAP;       # @storage : @parameter%dispatchRoyalties
                    DUP;        # @storage : @storage : @parameter%dispatchRoyalties
                    DUG 2;      # @storage : @parameter%dispatchRoyalties : @storage
                    CAAAAR;     # address : @parameter%dispatchRoyalties : @storage
                    SENDER;     # address : address : @parameter%dispatchRoyalties : @storage
                    COMPARE;    # int : @parameter%dispatchRoyalties : @storage
                    EQ;         # bool : @parameter%dispatchRoyalties : @storage
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: sp.sender == self.data.administrator"; # string : @parameter%dispatchRoyalties : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%dispatchRoyalties : @storage
                    # for address in params.addresses: ... # @parameter%dispatchRoyalties : @storage
                    DUP;        # @parameter%dispatchRoyalties : @parameter%dispatchRoyalties : @storage
                    CAR;        # list address : @parameter%dispatchRoyalties : @storage
                    NIL operation; # list operation : list address : @parameter%dispatchRoyalties : @storage
                    SWAP;       # list address : list operation : @parameter%dispatchRoyalties : @storage
                    ITER
                      {
                        # if (self.data.balances.contains(address)) & ((sp.as_nat(self.data.balances[address].balance) * sp.as_nat(10000000000)) > (((sp.as_nat(self.data.circulatingSupply) * sp.as_nat(10000000000)) // params.amount) + 1)): # address : list operation : @parameter%dispatchRoyalties : @storage
                        DIG 3;      # @storage : address : list operation : @parameter%dispatchRoyalties
                        DUP;        # @storage : @storage : address : list operation : @parameter%dispatchRoyalties
                        DUG 4;      # @storage : address : list operation : @parameter%dispatchRoyalties : @storage
                        CAAADR;     # big_map address (pair (int %balance) (bool %lock)) : address : list operation : @parameter%dispatchRoyalties : @storage
                        SWAP;       # address : big_map address (pair (int %balance) (bool %lock)) : list operation : @parameter%dispatchRoyalties : @storage
                        DUP;        # address : address : big_map address (pair (int %balance) (bool %lock)) : list operation : @parameter%dispatchRoyalties : @storage
                        DUG 2;      # address : big_map address (pair (int %balance) (bool %lock)) : address : list operation : @parameter%dispatchRoyalties : @storage
                        MEM;        # bool : address : list operation : @parameter%dispatchRoyalties : @storage
                        IF
                          {
                            PUSH nat 1; # nat : address : list operation : @parameter%dispatchRoyalties : @storage
                            DIG 3;      # @parameter%dispatchRoyalties : nat : address : list operation : @storage
                            DUP;        # @parameter%dispatchRoyalties : @parameter%dispatchRoyalties : nat : address : list operation : @storage
                            DUG 4;      # @parameter%dispatchRoyalties : nat : address : list operation : @parameter%dispatchRoyalties : @storage
                            CDR;        # nat : nat : address : list operation : @parameter%dispatchRoyalties : @storage
                            PUSH int 10000000000; # int : nat : nat : address : list operation : @parameter%dispatchRoyalties : @storage
                            ISNAT;      # option nat : nat : nat : address : list operation : @parameter%dispatchRoyalties : @storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit : nat : nat : address : list operation : @parameter%dispatchRoyalties : @storage
                                FAILWITH;   # FAILED
                              }; # @some : nat : nat : address : list operation : @parameter%dispatchRoyalties : @storage
                            DIG 6;      # @storage : @some : nat : nat : address : list operation : @parameter%dispatchRoyalties
                            DUP;        # @storage : @storage : @some : nat : nat : address : list operation : @parameter%dispatchRoyalties
                            DUG 7;      # @storage : @some : nat : nat : address : list operation : @parameter%dispatchRoyalties : @storage
                            CAADAR;     # int : @some : nat : nat : address : list operation : @parameter%dispatchRoyalties : @storage
                            ISNAT;      # option nat : @some : nat : nat : address : list operation : @parameter%dispatchRoyalties : @storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit : @some : nat : nat : address : list operation : @parameter%dispatchRoyalties : @storage
                                FAILWITH;   # FAILED
                              }; # @some : @some : nat : nat : address : list operation : @parameter%dispatchRoyalties : @storage
                            MUL;        # nat : nat : nat : address : list operation : @parameter%dispatchRoyalties : @storage
                            EDIV;       # option (pair nat nat) : nat : address : list operation : @parameter%dispatchRoyalties : @storage
                            IF_SOME
                              {
                                CAR;        # nat : nat : address : list operation : @parameter%dispatchRoyalties : @storage
                              }
                              {
                                PUSH string "division by zero"; # string : nat : address : list operation : @parameter%dispatchRoyalties : @storage
                                FAILWITH;   # FAILED
                              }; # nat : nat : address : list operation : @parameter%dispatchRoyalties : @storage
                            ADD;        # nat : address : list operation : @parameter%dispatchRoyalties : @storage
                            PUSH int 10000000000; # int : nat : address : list operation : @parameter%dispatchRoyalties : @storage
                            ISNAT;      # option nat : nat : address : list operation : @parameter%dispatchRoyalties : @storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit : nat : address : list operation : @parameter%dispatchRoyalties : @storage
                                FAILWITH;   # FAILED
                              }; # @some : nat : address : list operation : @parameter%dispatchRoyalties : @storage
                            DIG 5;      # @storage : @some : nat : address : list operation : @parameter%dispatchRoyalties
                            DUP;        # @storage : @storage : @some : nat : address : list operation : @parameter%dispatchRoyalties
                            DUG 6;      # @storage : @some : nat : address : list operation : @parameter%dispatchRoyalties : @storage
                            CAAADR;     # big_map address (pair (int %balance) (bool %lock)) : @some : nat : address : list operation : @parameter%dispatchRoyalties : @storage
                            DIG 3;      # address : big_map address (pair (int %balance) (bool %lock)) : @some : nat : list operation : @parameter%dispatchRoyalties : @storage
                            DUP;        # address : address : big_map address (pair (int %balance) (bool %lock)) : @some : nat : list operation : @parameter%dispatchRoyalties : @storage
                            DUG 4;      # address : big_map address (pair (int %balance) (bool %lock)) : @some : nat : address : list operation : @parameter%dispatchRoyalties : @storage
                            GET;        # option (pair (int %balance) (bool %lock)) : @some : nat : address : list operation : @parameter%dispatchRoyalties : @storage
                            IF_SOME
                              {
                                # of_some: Get-item:136 # @some : @some : nat : address : list operation : @parameter%dispatchRoyalties : @storage
                              }
                              {
                                PUSH string "Get-item:136"; # string : @some : nat : address : list operation : @parameter%dispatchRoyalties : @storage
                                FAILWITH;   # FAILED
                              }; # @some : @some : nat : address : list operation : @parameter%dispatchRoyalties : @storage
                            CAR;        # int : @some : nat : address : list operation : @parameter%dispatchRoyalties : @storage
                            ISNAT;      # option nat : @some : nat : address : list operation : @parameter%dispatchRoyalties : @storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit : @some : nat : address : list operation : @parameter%dispatchRoyalties : @storage
                                FAILWITH;   # FAILED
                              }; # @some : @some : nat : address : list operation : @parameter%dispatchRoyalties : @storage
                            MUL;        # nat : nat : address : list operation : @parameter%dispatchRoyalties : @storage
                            COMPARE;    # int : address : list operation : @parameter%dispatchRoyalties : @storage
                            GT;         # bool : address : list operation : @parameter%dispatchRoyalties : @storage
                          }
                          {
                            PUSH bool False; # bool : address : list operation : @parameter%dispatchRoyalties : @storage
                          }; # bool : address : list operation : @parameter%dispatchRoyalties : @storage
                        IF
                          {
                            # sp.send(address, sp.mutez((sp.as_nat(self.data.balances[address].balance) * sp.as_nat(10000000000)) // (((sp.as_nat(self.data.circulatingSupply) * sp.as_nat(10000000000)) // params.amount) + 1))) # address : list operation : @parameter%dispatchRoyalties : @storage
                            SWAP;       # list operation : address : @parameter%dispatchRoyalties : @storage
                            DUP;        # list operation : list operation : address : @parameter%dispatchRoyalties : @storage
                            DUG 2;      # list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                            SWAP;       # address : list operation : list operation : @parameter%dispatchRoyalties : @storage
                            DUP;        # address : address : list operation : list operation : @parameter%dispatchRoyalties : @storage
                            DUG 2;      # address : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                            CONTRACT unit; # option (contract unit) : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                                FAILWITH;   # FAILED
                              }; # @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                            PUSH mutez 1; # mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                            PUSH nat 1; # nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                            DIG 6;      # @parameter%dispatchRoyalties : nat : mutez : @some : list operation : address : list operation : @storage
                            DUP;        # @parameter%dispatchRoyalties : @parameter%dispatchRoyalties : nat : mutez : @some : list operation : address : list operation : @storage
                            DUG 7;      # @parameter%dispatchRoyalties : nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                            CDR;        # nat : nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                            PUSH int 10000000000; # int : nat : nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                            ISNAT;      # option nat : nat : nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit : nat : nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                                FAILWITH;   # FAILED
                              }; # @some : nat : nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                            DIG 9;      # @storage : @some : nat : nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties
                            DUP;        # @storage : @storage : @some : nat : nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties
                            DUG 10;     # @storage : @some : nat : nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                            CAADAR;     # int : @some : nat : nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                            ISNAT;      # option nat : @some : nat : nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit : @some : nat : nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                                FAILWITH;   # FAILED
                              }; # @some : @some : nat : nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                            MUL;        # nat : nat : nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                            EDIV;       # option (pair nat nat) : nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                            IF_SOME
                              {
                                CAR;        # nat : nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                              }
                              {
                                PUSH string "division by zero"; # string : nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                                FAILWITH;   # FAILED
                              }; # nat : nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                            ADD;        # nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                            PUSH int 10000000000; # int : nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                            ISNAT;      # option nat : nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit : nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                                FAILWITH;   # FAILED
                              }; # @some : nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                            DIG 8;      # @storage : @some : nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties
                            DUP;        # @storage : @storage : @some : nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties
                            DUG 9;      # @storage : @some : nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                            CAAADR;     # big_map address (pair (int %balance) (bool %lock)) : @some : nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                            DIG 6;      # address : big_map address (pair (int %balance) (bool %lock)) : @some : nat : mutez : @some : list operation : list operation : @parameter%dispatchRoyalties : @storage
                            DUP;        # address : address : big_map address (pair (int %balance) (bool %lock)) : @some : nat : mutez : @some : list operation : list operation : @parameter%dispatchRoyalties : @storage
                            DUG 7;      # address : big_map address (pair (int %balance) (bool %lock)) : @some : nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                            GET;        # option (pair (int %balance) (bool %lock)) : @some : nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                            IF_SOME
                              {
                                # of_some: Get-item:136 # @some : @some : nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                              }
                              {
                                PUSH string "Get-item:136"; # string : @some : nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                                FAILWITH;   # FAILED
                              }; # @some : @some : nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                            CAR;        # int : @some : nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                            ISNAT;      # option nat : @some : nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit : @some : nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                                FAILWITH;   # FAILED
                              }; # @some : @some : nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                            MUL;        # nat : nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                            EDIV;       # option (pair nat nat) : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                            IF_SOME
                              {
                                CAR;        # nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                              }
                              {
                                PUSH string "division by zero"; # string : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                                FAILWITH;   # FAILED
                              }; # nat : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                            MUL;        # mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                            PUSH unit Unit; # unit : mutez : @some : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                            TRANSFER_TOKENS; # operation : list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                            CONS;       # list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                            DUG 2;      # address : list operation : list operation : @parameter%dispatchRoyalties : @storage
                            SWAP;       # list operation : address : list operation : @parameter%dispatchRoyalties : @storage
                            DROP;       # address : list operation : @parameter%dispatchRoyalties : @storage
                          }
                          {}; # address : list operation : @parameter%dispatchRoyalties : @storage
                        DROP;       # list operation : @parameter%dispatchRoyalties : @storage
                      }; # list operation : @parameter%dispatchRoyalties : @storage
                    SWAP;       # @parameter%dispatchRoyalties : list operation : @storage
                    DROP;       # list operation : @storage
                  }
                  {
                    IF_LEFT
                      {
                        # Entry point: getAdministrator # @parameter%getAdministrator : @storage
                        # sp.transfer(self.data.administrator, sp.tez(0), sp.contract(sp.TAddress, params.target).open_some()) # @parameter%getAdministrator : @storage
                        DUP;        # @parameter%getAdministrator : @parameter%getAdministrator : @storage
                        NIL operation; # list operation : @parameter%getAdministrator : @parameter%getAdministrator : @storage
                        SWAP;       # @parameter%getAdministrator : list operation : @parameter%getAdministrator : @storage
                        CONTRACT address; # option (contract address) : list operation : @parameter%getAdministrator : @storage
                        IF_SOME
                          {}
                          {
                            PUSH unit Unit; # unit : list operation : @parameter%getAdministrator : @storage
                            FAILWITH;   # FAILED
                          }; # @some : list operation : @parameter%getAdministrator : @storage
                        PUSH mutez 0; # mutez : @some : list operation : @parameter%getAdministrator : @storage
                        DIG 4;      # @storage : mutez : @some : list operation : @parameter%getAdministrator
                        DUP;        # @storage : @storage : mutez : @some : list operation : @parameter%getAdministrator
                        DUG 5;      # @storage : mutez : @some : list operation : @parameter%getAdministrator : @storage
                        CAAAAR;     # address : mutez : @some : list operation : @parameter%getAdministrator : @storage
                        TRANSFER_TOKENS; # operation : list operation : @parameter%getAdministrator : @storage
                        CONS;       # list operation : @parameter%getAdministrator : @storage
                        SWAP;       # @parameter%getAdministrator : list operation : @storage
                        DROP;       # list operation : @storage
                      }
                      {
                        # Entry point: getBalance # @parameter%getBalance : @storage
                        # if self.data.balances.contains(params.owner): # @parameter%getBalance : @storage
                        SWAP;       # @storage : @parameter%getBalance
                        DUP;        # @storage : @storage : @parameter%getBalance
                        DUG 2;      # @storage : @parameter%getBalance : @storage
                        CAAADR;     # big_map address (pair (int %balance) (bool %lock)) : @parameter%getBalance : @storage
                        SWAP;       # @parameter%getBalance : big_map address (pair (int %balance) (bool %lock)) : @storage
                        DUP;        # @parameter%getBalance : @parameter%getBalance : big_map address (pair (int %balance) (bool %lock)) : @storage
                        DUG 2;      # @parameter%getBalance : big_map address (pair (int %balance) (bool %lock)) : @parameter%getBalance : @storage
                        CAR;        # address : big_map address (pair (int %balance) (bool %lock)) : @parameter%getBalance : @storage
                        MEM;        # bool : @parameter%getBalance : @storage
                        IF
                          {
                            # sp.transfer(sp.as_nat(self.data.balances[params.owner].balance), sp.tez(0), sp.contract(sp.TNat, params.target).open_some()) # @parameter%getBalance : @storage
                            DUP;        # @parameter%getBalance : @parameter%getBalance : @storage
                            CDR;        # address : @parameter%getBalance : @storage
                            NIL operation; # list operation : address : @parameter%getBalance : @storage
                            SWAP;       # address : list operation : @parameter%getBalance : @storage
                            CONTRACT nat; # option (contract nat) : list operation : @parameter%getBalance : @storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit : list operation : @parameter%getBalance : @storage
                                FAILWITH;   # FAILED
                              }; # @some : list operation : @parameter%getBalance : @storage
                            PUSH mutez 0; # mutez : @some : list operation : @parameter%getBalance : @storage
                            DIG 4;      # @storage : mutez : @some : list operation : @parameter%getBalance
                            DUP;        # @storage : @storage : mutez : @some : list operation : @parameter%getBalance
                            DUG 5;      # @storage : mutez : @some : list operation : @parameter%getBalance : @storage
                            CAAADR;     # big_map address (pair (int %balance) (bool %lock)) : mutez : @some : list operation : @parameter%getBalance : @storage
                            DIG 4;      # @parameter%getBalance : big_map address (pair (int %balance) (bool %lock)) : mutez : @some : list operation : @storage
                            DUP;        # @parameter%getBalance : @parameter%getBalance : big_map address (pair (int %balance) (bool %lock)) : mutez : @some : list operation : @storage
                            DUG 5;      # @parameter%getBalance : big_map address (pair (int %balance) (bool %lock)) : mutez : @some : list operation : @parameter%getBalance : @storage
                            CAR;        # address : big_map address (pair (int %balance) (bool %lock)) : mutez : @some : list operation : @parameter%getBalance : @storage
                            GET;        # option (pair (int %balance) (bool %lock)) : mutez : @some : list operation : @parameter%getBalance : @storage
                            IF_SOME
                              {
                                # of_some: Get-item:154 # @some : mutez : @some : list operation : @parameter%getBalance : @storage
                              }
                              {
                                PUSH string "Get-item:154"; # string : mutez : @some : list operation : @parameter%getBalance : @storage
                                FAILWITH;   # FAILED
                              }; # @some : mutez : @some : list operation : @parameter%getBalance : @storage
                            CAR;        # int : mutez : @some : list operation : @parameter%getBalance : @storage
                            ISNAT;      # option nat : mutez : @some : list operation : @parameter%getBalance : @storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit : mutez : @some : list operation : @parameter%getBalance : @storage
                                FAILWITH;   # FAILED
                              }; # @some : mutez : @some : list operation : @parameter%getBalance : @storage
                            TRANSFER_TOKENS; # operation : list operation : @parameter%getBalance : @storage
                            CONS;       # list operation : @parameter%getBalance : @storage
                          }
                          {
                            # sp.transfer(sp.as_nat(0), sp.tez(0), sp.contract(sp.TNat, params.target).open_some()) # @parameter%getBalance : @storage
                            DUP;        # @parameter%getBalance : @parameter%getBalance : @storage
                            CDR;        # address : @parameter%getBalance : @storage
                            NIL operation; # list operation : address : @parameter%getBalance : @storage
                            SWAP;       # address : list operation : @parameter%getBalance : @storage
                            CONTRACT nat; # option (contract nat) : list operation : @parameter%getBalance : @storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit : list operation : @parameter%getBalance : @storage
                                FAILWITH;   # FAILED
                              }; # @some : list operation : @parameter%getBalance : @storage
                            PUSH mutez 0; # mutez : @some : list operation : @parameter%getBalance : @storage
                            PUSH int 0; # int : mutez : @some : list operation : @parameter%getBalance : @storage
                            ISNAT;      # option nat : mutez : @some : list operation : @parameter%getBalance : @storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit : mutez : @some : list operation : @parameter%getBalance : @storage
                                FAILWITH;   # FAILED
                              }; # @some : mutez : @some : list operation : @parameter%getBalance : @storage
                            TRANSFER_TOKENS; # operation : list operation : @parameter%getBalance : @storage
                            CONS;       # list operation : @parameter%getBalance : @storage
                          }; # list operation : @parameter%getBalance : @storage
                        SWAP;       # @parameter%getBalance : list operation : @storage
                        DROP;       # list operation : @storage
                      }; # list operation : @storage
                  }; # list operation : @storage
              }; # list operation : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair int string) (pair (string %tokenSymbol) (bool %transferStatus))))
          }
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    # Entry point: getCirculatingSupply # @parameter%getCirculatingSupply : @storage
                    # sp.transfer(sp.as_nat(self.data.circulatingSupply), sp.tez(0), sp.contract(sp.TNat, params.target).open_some()) # @parameter%getCirculatingSupply : @storage
                    DUP;        # @parameter%getCirculatingSupply : @parameter%getCirculatingSupply : @storage
                    NIL operation; # list operation : @parameter%getCirculatingSupply : @parameter%getCirculatingSupply : @storage
                    SWAP;       # @parameter%getCirculatingSupply : list operation : @parameter%getCirculatingSupply : @storage
                    CONTRACT nat; # option (contract nat) : list operation : @parameter%getCirculatingSupply : @storage
                    IF_SOME
                      {}
                      {
                        PUSH unit Unit; # unit : list operation : @parameter%getCirculatingSupply : @storage
                        FAILWITH;   # FAILED
                      }; # @some : list operation : @parameter%getCirculatingSupply : @storage
                    PUSH mutez 0; # mutez : @some : list operation : @parameter%getCirculatingSupply : @storage
                    DIG 4;      # @storage : mutez : @some : list operation : @parameter%getCirculatingSupply
                    DUP;        # @storage : @storage : mutez : @some : list operation : @parameter%getCirculatingSupply
                    DUG 5;      # @storage : mutez : @some : list operation : @parameter%getCirculatingSupply : @storage
                    CAADAR;     # int : mutez : @some : list operation : @parameter%getCirculatingSupply : @storage
                    ISNAT;      # option nat : mutez : @some : list operation : @parameter%getCirculatingSupply : @storage
                    IF_SOME
                      {}
                      {
                        PUSH unit Unit; # unit : mutez : @some : list operation : @parameter%getCirculatingSupply : @storage
                        FAILWITH;   # FAILED
                      }; # @some : mutez : @some : list operation : @parameter%getCirculatingSupply : @storage
                    TRANSFER_TOKENS; # operation : list operation : @parameter%getCirculatingSupply : @storage
                    CONS;       # list operation : @parameter%getCirculatingSupply : @storage
                    SWAP;       # @parameter%getCirculatingSupply : list operation : @storage
                    DROP;       # list operation : @storage
                  }
                  {
                    IF_LEFT
                      {
                        # Entry point: getFactor # @parameter%getFactor : @storage
                        # sp.transfer(sp.as_nat(self.data.factor), sp.tez(0), sp.contract(sp.TNat, params.target).open_some()) # @parameter%getFactor : @storage
                        DUP;        # @parameter%getFactor : @parameter%getFactor : @storage
                        NIL operation; # list operation : @parameter%getFactor : @parameter%getFactor : @storage
                        SWAP;       # @parameter%getFactor : list operation : @parameter%getFactor : @storage
                        CONTRACT nat; # option (contract nat) : list operation : @parameter%getFactor : @storage
                        IF_SOME
                          {}
                          {
                            PUSH unit Unit; # unit : list operation : @parameter%getFactor : @storage
                            FAILWITH;   # FAILED
                          }; # @some : list operation : @parameter%getFactor : @storage
                        PUSH mutez 0; # mutez : @some : list operation : @parameter%getFactor : @storage
                        DIG 4;      # @storage : mutez : @some : list operation : @parameter%getFactor
                        DUP;        # @storage : @storage : mutez : @some : list operation : @parameter%getFactor
                        DUG 5;      # @storage : mutez : @some : list operation : @parameter%getFactor : @storage
                        CADAAR;     # int : mutez : @some : list operation : @parameter%getFactor : @storage
                        ISNAT;      # option nat : mutez : @some : list operation : @parameter%getFactor : @storage
                        IF_SOME
                          {}
                          {
                            PUSH unit Unit; # unit : mutez : @some : list operation : @parameter%getFactor : @storage
                            FAILWITH;   # FAILED
                          }; # @some : mutez : @some : list operation : @parameter%getFactor : @storage
                        TRANSFER_TOKENS; # operation : list operation : @parameter%getFactor : @storage
                        CONS;       # list operation : @parameter%getFactor : @storage
                        SWAP;       # @parameter%getFactor : list operation : @storage
                        DROP;       # list operation : @storage
                      }
                      {
                        # Entry point: getManager # @parameter%getManager : @storage
                        # sp.transfer(self.data.saleManager, sp.tez(0), sp.contract(sp.TAddress, params.target).open_some()) # @parameter%getManager : @storage
                        DUP;        # @parameter%getManager : @parameter%getManager : @storage
                        NIL operation; # list operation : @parameter%getManager : @parameter%getManager : @storage
                        SWAP;       # @parameter%getManager : list operation : @parameter%getManager : @storage
                        CONTRACT address; # option (contract address) : list operation : @parameter%getManager : @storage
                        IF_SOME
                          {}
                          {
                            PUSH unit Unit; # unit : list operation : @parameter%getManager : @storage
                            FAILWITH;   # FAILED
                          }; # @some : list operation : @parameter%getManager : @storage
                        PUSH mutez 0; # mutez : @some : list operation : @parameter%getManager : @storage
                        DIG 4;      # @storage : mutez : @some : list operation : @parameter%getManager
                        DUP;        # @storage : @storage : mutez : @some : list operation : @parameter%getManager
                        DUG 5;      # @storage : mutez : @some : list operation : @parameter%getManager : @storage
                        CDAADR;     # address : mutez : @some : list operation : @parameter%getManager : @storage
                        TRANSFER_TOKENS; # operation : list operation : @parameter%getManager : @storage
                        CONS;       # list operation : @parameter%getManager : @storage
                        SWAP;       # @parameter%getManager : list operation : @storage
                        DROP;       # list operation : @storage
                      }; # list operation : @storage
                  }; # list operation : @storage
              }
              {
                IF_LEFT
                  {
                    IF_LEFT
                      {
                        # Entry point: getSaleLimit # @parameter%getSaleLimit : @storage
                        # sp.transfer(sp.as_nat(self.data.saleLimit), sp.tez(0), sp.contract(sp.TNat, params.target).open_some()) # @parameter%getSaleLimit : @storage
                        DUP;        # @parameter%getSaleLimit : @parameter%getSaleLimit : @storage
                        NIL operation; # list operation : @parameter%getSaleLimit : @parameter%getSaleLimit : @storage
                        SWAP;       # @parameter%getSaleLimit : list operation : @parameter%getSaleLimit : @storage
                        CONTRACT nat; # option (contract nat) : list operation : @parameter%getSaleLimit : @storage
                        IF_SOME
                          {}
                          {
                            PUSH unit Unit; # unit : list operation : @parameter%getSaleLimit : @storage
                            FAILWITH;   # FAILED
                          }; # @some : list operation : @parameter%getSaleLimit : @storage
                        PUSH mutez 0; # mutez : @some : list operation : @parameter%getSaleLimit : @storage
                        DIG 4;      # @storage : mutez : @some : list operation : @parameter%getSaleLimit
                        DUP;        # @storage : @storage : mutez : @some : list operation : @parameter%getSaleLimit
                        DUG 5;      # @storage : mutez : @some : list operation : @parameter%getSaleLimit : @storage
                        CDAAAR;     # int : mutez : @some : list operation : @parameter%getSaleLimit : @storage
                        ISNAT;      # option nat : mutez : @some : list operation : @parameter%getSaleLimit : @storage
                        IF_SOME
                          {}
                          {
                            PUSH unit Unit; # unit : mutez : @some : list operation : @parameter%getSaleLimit : @storage
                            FAILWITH;   # FAILED
                          }; # @some : mutez : @some : list operation : @parameter%getSaleLimit : @storage
                        TRANSFER_TOKENS; # operation : list operation : @parameter%getSaleLimit : @storage
                        CONS;       # list operation : @parameter%getSaleLimit : @storage
                        SWAP;       # @parameter%getSaleLimit : list operation : @storage
                        DROP;       # list operation : @storage
                      }
                      {
                        # Entry point: getSaleStatus # @parameter%getSaleStatus : @storage
                        # if self.data.saleStatus: # @parameter%getSaleStatus : @storage
                        SWAP;       # @storage : @parameter%getSaleStatus
                        DUP;        # @storage : @storage : @parameter%getSaleStatus
                        DUG 2;      # @storage : @parameter%getSaleStatus : @storage
                        CDADAR;     # bool : @parameter%getSaleStatus : @storage
                        IF
                          {
                            # sp.transfer(1, sp.tez(0), sp.contract(sp.TNat, params.target).open_some()) # @parameter%getSaleStatus : @storage
                            DUP;        # @parameter%getSaleStatus : @parameter%getSaleStatus : @storage
                            NIL operation; # list operation : @parameter%getSaleStatus : @parameter%getSaleStatus : @storage
                            SWAP;       # @parameter%getSaleStatus : list operation : @parameter%getSaleStatus : @storage
                            CONTRACT nat; # option (contract nat) : list operation : @parameter%getSaleStatus : @storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit : list operation : @parameter%getSaleStatus : @storage
                                FAILWITH;   # FAILED
                              }; # @some : list operation : @parameter%getSaleStatus : @storage
                            PUSH mutez 0; # mutez : @some : list operation : @parameter%getSaleStatus : @storage
                            PUSH nat 1; # nat : mutez : @some : list operation : @parameter%getSaleStatus : @storage
                            TRANSFER_TOKENS; # operation : list operation : @parameter%getSaleStatus : @storage
                            CONS;       # list operation : @parameter%getSaleStatus : @storage
                          }
                          {
                            # sp.transfer(0, sp.tez(0), sp.contract(sp.TNat, params.target).open_some()) # @parameter%getSaleStatus : @storage
                            DUP;        # @parameter%getSaleStatus : @parameter%getSaleStatus : @storage
                            NIL operation; # list operation : @parameter%getSaleStatus : @parameter%getSaleStatus : @storage
                            SWAP;       # @parameter%getSaleStatus : list operation : @parameter%getSaleStatus : @storage
                            CONTRACT nat; # option (contract nat) : list operation : @parameter%getSaleStatus : @storage
                            IF_SOME
                              {}
                              {
                                PUSH unit Unit; # unit : list operation : @parameter%getSaleStatus : @storage
                                FAILWITH;   # FAILED
                              }; # @some : list operation : @parameter%getSaleStatus : @storage
                            PUSH mutez 0; # mutez : @some : list operation : @parameter%getSaleStatus : @storage
                            PUSH nat 0; # nat : mutez : @some : list operation : @parameter%getSaleStatus : @storage
                            TRANSFER_TOKENS; # operation : list operation : @parameter%getSaleStatus : @storage
                            CONS;       # list operation : @parameter%getSaleStatus : @storage
                          }; # list operation : @parameter%getSaleStatus : @storage
                        SWAP;       # @parameter%getSaleStatus : list operation : @storage
                        DROP;       # list operation : @storage
                      }; # list operation : @storage
                  }
                  {
                    IF_LEFT
                      {
                        # Entry point: getSoldToken # @parameter%getSoldToken : @storage
                        # sp.transfer(sp.as_nat(self.data.soldToken), sp.tez(0), sp.contract(sp.TNat, params.target).open_some()) # @parameter%getSoldToken : @storage
                        DUP;        # @parameter%getSoldToken : @parameter%getSoldToken : @storage
                        NIL operation; # list operation : @parameter%getSoldToken : @parameter%getSoldToken : @storage
                        SWAP;       # @parameter%getSoldToken : list operation : @parameter%getSoldToken : @storage
                        CONTRACT nat; # option (contract nat) : list operation : @parameter%getSoldToken : @storage
                        IF_SOME
                          {}
                          {
                            PUSH unit Unit; # unit : list operation : @parameter%getSoldToken : @storage
                            FAILWITH;   # FAILED
                          }; # @some : list operation : @parameter%getSoldToken : @storage
                        PUSH mutez 0; # mutez : @some : list operation : @parameter%getSoldToken : @storage
                        DIG 4;      # @storage : mutez : @some : list operation : @parameter%getSoldToken
                        DUP;        # @storage : @storage : mutez : @some : list operation : @parameter%getSoldToken
                        DUG 5;      # @storage : mutez : @some : list operation : @parameter%getSoldToken : @storage
                        CDADDR;     # int : mutez : @some : list operation : @parameter%getSoldToken : @storage
                        ISNAT;      # option nat : mutez : @some : list operation : @parameter%getSoldToken : @storage
                        IF_SOME
                          {}
                          {
                            PUSH unit Unit; # unit : mutez : @some : list operation : @parameter%getSoldToken : @storage
                            FAILWITH;   # FAILED
                          }; # @some : mutez : @some : list operation : @parameter%getSoldToken : @storage
                        TRANSFER_TOKENS; # operation : list operation : @parameter%getSoldToken : @storage
                        CONS;       # list operation : @parameter%getSoldToken : @storage
                        SWAP;       # @parameter%getSoldToken : list operation : @storage
                        DROP;       # list operation : @storage
                      }
                      {
                        # Entry point: getSupplyLimit # @parameter%getSupplyLimit : @storage
                        # sp.transfer(sp.as_nat(self.data.supplyLimit), sp.tez(0), sp.contract(sp.TNat, params.target).open_some()) # @parameter%getSupplyLimit : @storage
                        DUP;        # @parameter%getSupplyLimit : @parameter%getSupplyLimit : @storage
                        NIL operation; # list operation : @parameter%getSupplyLimit : @parameter%getSupplyLimit : @storage
                        SWAP;       # @parameter%getSupplyLimit : list operation : @parameter%getSupplyLimit : @storage
                        CONTRACT nat; # option (contract nat) : list operation : @parameter%getSupplyLimit : @storage
                        IF_SOME
                          {}
                          {
                            PUSH unit Unit; # unit : list operation : @parameter%getSupplyLimit : @storage
                            FAILWITH;   # FAILED
                          }; # @some : list operation : @parameter%getSupplyLimit : @storage
                        PUSH mutez 0; # mutez : @some : list operation : @parameter%getSupplyLimit : @storage
                        DIG 4;      # @storage : mutez : @some : list operation : @parameter%getSupplyLimit
                        DUP;        # @storage : @storage : mutez : @some : list operation : @parameter%getSupplyLimit
                        DUG 5;      # @storage : mutez : @some : list operation : @parameter%getSupplyLimit : @storage
                        CDDAAR;     # int : mutez : @some : list operation : @parameter%getSupplyLimit : @storage
                        ISNAT;      # option nat : mutez : @some : list operation : @parameter%getSupplyLimit : @storage
                        IF_SOME
                          {}
                          {
                            PUSH unit Unit; # unit : mutez : @some : list operation : @parameter%getSupplyLimit : @storage
                            FAILWITH;   # FAILED
                          }; # @some : mutez : @some : list operation : @parameter%getSupplyLimit : @storage
                        TRANSFER_TOKENS; # operation : list operation : @parameter%getSupplyLimit : @storage
                        CONS;       # list operation : @parameter%getSupplyLimit : @storage
                        SWAP;       # @parameter%getSupplyLimit : list operation : @storage
                        DROP;       # list operation : @storage
                      }; # list operation : @storage
                  }; # list operation : @storage
              }; # list operation : @storage
          }; # list operation : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair int string) (pair (string %tokenSymbol) (bool %transferStatus))))
      }
      {
        IF_LEFT
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    # Entry point: getTransferStatus # @parameter%getTransferStatus : @storage
                    # if self.data.transferStatus: # @parameter%getTransferStatus : @storage
                    SWAP;       # @storage : @parameter%getTransferStatus
                    DUP;        # @storage : @storage : @parameter%getTransferStatus
                    DUG 2;      # @storage : @parameter%getTransferStatus : @storage
                    CDDDDR;     # bool : @parameter%getTransferStatus : @storage
                    IF
                      {
                        # sp.transfer(1, sp.tez(0), sp.contract(sp.TNat, params.target).open_some()) # @parameter%getTransferStatus : @storage
                        DUP;        # @parameter%getTransferStatus : @parameter%getTransferStatus : @storage
                        NIL operation; # list operation : @parameter%getTransferStatus : @parameter%getTransferStatus : @storage
                        SWAP;       # @parameter%getTransferStatus : list operation : @parameter%getTransferStatus : @storage
                        CONTRACT nat; # option (contract nat) : list operation : @parameter%getTransferStatus : @storage
                        IF_SOME
                          {}
                          {
                            PUSH unit Unit; # unit : list operation : @parameter%getTransferStatus : @storage
                            FAILWITH;   # FAILED
                          }; # @some : list operation : @parameter%getTransferStatus : @storage
                        PUSH mutez 0; # mutez : @some : list operation : @parameter%getTransferStatus : @storage
                        PUSH nat 1; # nat : mutez : @some : list operation : @parameter%getTransferStatus : @storage
                        TRANSFER_TOKENS; # operation : list operation : @parameter%getTransferStatus : @storage
                        CONS;       # list operation : @parameter%getTransferStatus : @storage
                      }
                      {
                        # sp.transfer(0, sp.tez(0), sp.contract(sp.TNat, params.target).open_some()) # @parameter%getTransferStatus : @storage
                        DUP;        # @parameter%getTransferStatus : @parameter%getTransferStatus : @storage
                        NIL operation; # list operation : @parameter%getTransferStatus : @parameter%getTransferStatus : @storage
                        SWAP;       # @parameter%getTransferStatus : list operation : @parameter%getTransferStatus : @storage
                        CONTRACT nat; # option (contract nat) : list operation : @parameter%getTransferStatus : @storage
                        IF_SOME
                          {}
                          {
                            PUSH unit Unit; # unit : list operation : @parameter%getTransferStatus : @storage
                            FAILWITH;   # FAILED
                          }; # @some : list operation : @parameter%getTransferStatus : @storage
                        PUSH mutez 0; # mutez : @some : list operation : @parameter%getTransferStatus : @storage
                        PUSH nat 0; # nat : mutez : @some : list operation : @parameter%getTransferStatus : @storage
                        TRANSFER_TOKENS; # operation : list operation : @parameter%getTransferStatus : @storage
                        CONS;       # list operation : @parameter%getTransferStatus : @storage
                      }; # list operation : @parameter%getTransferStatus : @storage
                    SWAP;       # @parameter%getTransferStatus : list operation : @storage
                    DROP;       # list operation : @storage
                  }
                  {
                    IF_LEFT
                      {
                        # Entry point: increaseSaleLimit # @parameter%increaseSaleLimit : @storage
                        # sp.verify(sp.sender == self.data.administrator) # @parameter%increaseSaleLimit : @storage
                        SWAP;       # @storage : @parameter%increaseSaleLimit
                        DUP;        # @storage : @storage : @parameter%increaseSaleLimit
                        DUG 2;      # @storage : @parameter%increaseSaleLimit : @storage
                        CAAAAR;     # address : @parameter%increaseSaleLimit : @storage
                        SENDER;     # address : address : @parameter%increaseSaleLimit : @storage
                        COMPARE;    # int : @parameter%increaseSaleLimit : @storage
                        EQ;         # bool : @parameter%increaseSaleLimit : @storage
                        IF
                          {}
                          {
                            PUSH string "WrongCondition: sp.sender == self.data.administrator"; # string : @parameter%increaseSaleLimit : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%increaseSaleLimit : @storage
                        # sp.verify(((params.amount + (self.data.saleLimit - self.data.soldToken)) + self.data.circulatingSupply) <= self.data.supplyLimit) # @parameter%increaseSaleLimit : @storage
                        SWAP;       # @storage : @parameter%increaseSaleLimit
                        DUP;        # @storage : @storage : @parameter%increaseSaleLimit
                        DUG 2;      # @storage : @parameter%increaseSaleLimit : @storage
                        CDDAAR;     # int : @parameter%increaseSaleLimit : @storage
                        DIG 2;      # @storage : int : @parameter%increaseSaleLimit
                        DUP;        # @storage : @storage : int : @parameter%increaseSaleLimit
                        DUG 3;      # @storage : int : @parameter%increaseSaleLimit : @storage
                        CAADAR;     # int : int : @parameter%increaseSaleLimit : @storage
                        DIG 3;      # @storage : int : int : @parameter%increaseSaleLimit
                        DUP;        # @storage : @storage : int : int : @parameter%increaseSaleLimit
                        DUG 4;      # @storage : int : int : @parameter%increaseSaleLimit : @storage
                        CDADDR;     # int : int : int : @parameter%increaseSaleLimit : @storage
                        DIG 4;      # @storage : int : int : int : @parameter%increaseSaleLimit
                        DUP;        # @storage : @storage : int : int : int : @parameter%increaseSaleLimit
                        DUG 5;      # @storage : int : int : int : @parameter%increaseSaleLimit : @storage
                        CDAAAR;     # int : int : int : int : @parameter%increaseSaleLimit : @storage
                        SUB;        # int : int : int : @parameter%increaseSaleLimit : @storage
                        DIG 3;      # @parameter%increaseSaleLimit : int : int : int : @storage
                        DUP;        # @parameter%increaseSaleLimit : @parameter%increaseSaleLimit : int : int : int : @storage
                        DUG 4;      # @parameter%increaseSaleLimit : int : int : int : @parameter%increaseSaleLimit : @storage
                        ADD;        # int : int : int : @parameter%increaseSaleLimit : @storage
                        ADD;        # int : int : @parameter%increaseSaleLimit : @storage
                        COMPARE;    # int : @parameter%increaseSaleLimit : @storage
                        LE;         # bool : @parameter%increaseSaleLimit : @storage
                        IF
                          {}
                          {
                            PUSH string "WrongCondition: ((params.amount + (self.data.saleLimit - self.data.soldToken)) + self.data.circulatingSupply) <= self.data.supplyLimit"; # string : @parameter%increaseSaleLimit : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%increaseSaleLimit : @storage
                        # self.data.saleLimit += params.amount # @parameter%increaseSaleLimit : @storage
                        SWAP;       # @storage : @parameter%increaseSaleLimit
                        DUP;        # @storage : @storage : @parameter%increaseSaleLimit
                        DUG 2;      # @storage : @parameter%increaseSaleLimit : @storage
                        DUP;        # @storage : @storage : @parameter%increaseSaleLimit : @storage
                        CAR;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @storage : @parameter%increaseSaleLimit : @storage
                        SWAP;       # @storage : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%increaseSaleLimit : @storage
                        CDR;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%increaseSaleLimit : @storage
                        DUP;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%increaseSaleLimit : @storage
                        CDR;        # pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%increaseSaleLimit : @storage
                        SWAP;       # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%increaseSaleLimit : @storage
                        CAR;        # pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%increaseSaleLimit : @storage
                        DUP;        # pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%increaseSaleLimit : @storage
                        CDR;        # pair (bool %saleStatus) (int %soldToken) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%increaseSaleLimit : @storage
                        SWAP;       # pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (bool %saleStatus) (int %soldToken) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%increaseSaleLimit : @storage
                        CADR;       # address : pair (bool %saleStatus) (int %soldToken) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%increaseSaleLimit : @storage
                        DIG 4;      # @parameter%increaseSaleLimit : address : pair (bool %saleStatus) (int %soldToken) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @storage
                        DUP;        # @parameter%increaseSaleLimit : @parameter%increaseSaleLimit : address : pair (bool %saleStatus) (int %soldToken) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @storage
                        DUG 5;      # @parameter%increaseSaleLimit : address : pair (bool %saleStatus) (int %soldToken) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%increaseSaleLimit : @storage
                        DIG 6;      # @storage : @parameter%increaseSaleLimit : address : pair (bool %saleStatus) (int %soldToken) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%increaseSaleLimit
                        DUP;        # @storage : @storage : @parameter%increaseSaleLimit : address : pair (bool %saleStatus) (int %soldToken) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%increaseSaleLimit
                        DUG 7;      # @storage : @parameter%increaseSaleLimit : address : pair (bool %saleStatus) (int %soldToken) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%increaseSaleLimit : @storage
                        CDAAAR;     # int : @parameter%increaseSaleLimit : address : pair (bool %saleStatus) (int %soldToken) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%increaseSaleLimit : @storage
                        ADD;        # int : address : pair (bool %saleStatus) (int %soldToken) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%increaseSaleLimit : @storage
                        PAIR;       # pair int address : pair (bool %saleStatus) (int %soldToken) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%increaseSaleLimit : @storage
                        PAIR;       # pair (pair int address) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%increaseSaleLimit : @storage
                        PAIR;       # pair (pair (pair int address) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%increaseSaleLimit : @storage
                        SWAP;       # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair int address) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%increaseSaleLimit : @storage
                        PAIR;       # pair (pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair int address) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%increaseSaleLimit : @storage
                        DUG 2;      # @parameter%increaseSaleLimit : @storage : pair (pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair int address) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DROP 2;     # pair (pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair int address) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                      }
                      {
                        # Entry point: lockAddress # @parameter%lockAddress : @storage
                        # sp.verify(sp.sender == self.data.administrator) # @parameter%lockAddress : @storage
                        SWAP;       # @storage : @parameter%lockAddress
                        DUP;        # @storage : @storage : @parameter%lockAddress
                        DUG 2;      # @storage : @parameter%lockAddress : @storage
                        CAAAAR;     # address : @parameter%lockAddress : @storage
                        SENDER;     # address : address : @parameter%lockAddress : @storage
                        COMPARE;    # int : @parameter%lockAddress : @storage
                        EQ;         # bool : @parameter%lockAddress : @storage
                        IF
                          {}
                          {
                            PUSH string "WrongCondition: sp.sender == self.data.administrator"; # string : @parameter%lockAddress : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%lockAddress : @storage
                        # sp.verify(self.data.balances.contains(params.address)) # @parameter%lockAddress : @storage
                        SWAP;       # @storage : @parameter%lockAddress
                        DUP;        # @storage : @storage : @parameter%lockAddress
                        DUG 2;      # @storage : @parameter%lockAddress : @storage
                        CAAADR;     # big_map address (pair (int %balance) (bool %lock)) : @parameter%lockAddress : @storage
                        SWAP;       # @parameter%lockAddress : big_map address (pair (int %balance) (bool %lock)) : @storage
                        DUP;        # @parameter%lockAddress : @parameter%lockAddress : big_map address (pair (int %balance) (bool %lock)) : @storage
                        DUG 2;      # @parameter%lockAddress : big_map address (pair (int %balance) (bool %lock)) : @parameter%lockAddress : @storage
                        MEM;        # bool : @parameter%lockAddress : @storage
                        IF
                          {}
                          {
                            PUSH string "WrongCondition: self.data.balances.contains(params.address)"; # string : @parameter%lockAddress : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%lockAddress : @storage
                        # self.data.balances[params.address].lock = True # @parameter%lockAddress : @storage
                        SWAP;       # @storage : @parameter%lockAddress
                        DUP;        # @storage : @storage : @parameter%lockAddress
                        DUG 2;      # @storage : @parameter%lockAddress : @storage
                        DUP;        # @storage : @storage : @parameter%lockAddress : @storage
                        CDR;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage : @parameter%lockAddress : @storage
                        SWAP;       # @storage : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%lockAddress : @storage
                        CAR;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%lockAddress : @storage
                        DUP;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%lockAddress : @storage
                        CDR;        # pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%lockAddress : @storage
                        SWAP;       # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%lockAddress : @storage
                        CAR;        # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%lockAddress : @storage
                        DUP;        # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%lockAddress : @storage
                        CDR;        # pair (int %circulatingSupply) (address %covir) : pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%lockAddress : @storage
                        SWAP;       # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%lockAddress : @storage
                        CAR;        # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%lockAddress : @storage
                        DUP;        # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%lockAddress : @storage
                        CAR;        # address : pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%lockAddress : @storage
                        SWAP;       # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%lockAddress : @storage
                        CDR;        # big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%lockAddress : @storage
                        DUP;        # big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%lockAddress : @storage
                        DIG 6;      # @parameter%lockAddress : big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                        DUP;        # @parameter%lockAddress : @parameter%lockAddress : big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                        DUG 7;      # @parameter%lockAddress : big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%lockAddress : @storage
                        DUP;        # @parameter%lockAddress : @parameter%lockAddress : big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%lockAddress : @storage
                        DUG 2;      # @parameter%lockAddress : big_map address (pair (int %balance) (bool %lock)) : @parameter%lockAddress : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%lockAddress : @storage
                        GET;        # option (pair (int %balance) (bool %lock)) : @parameter%lockAddress : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%lockAddress : @storage
                        IF_SOME
                          {
                            # of_some: set_in_top-any # @some : @parameter%lockAddress : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%lockAddress : @storage
                          }
                          {
                            PUSH string "set_in_top-any"; # string : @parameter%lockAddress : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%lockAddress : @storage
                            FAILWITH;   # FAILED
                          }; # @some : @parameter%lockAddress : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%lockAddress : @storage
                        CAR;        # int : @parameter%lockAddress : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%lockAddress : @storage
                        PUSH bool True; # bool : int : @parameter%lockAddress : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%lockAddress : @storage
                        SWAP;       # int : bool : @parameter%lockAddress : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%lockAddress : @storage
                        PAIR;       # pair int bool : @parameter%lockAddress : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%lockAddress : @storage
                        SOME;       # option (pair int bool) : @parameter%lockAddress : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%lockAddress : @storage
                        SWAP;       # @parameter%lockAddress : option (pair int bool) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%lockAddress : @storage
                        UPDATE;     # big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%lockAddress : @storage
                        SWAP;       # address : big_map address (pair int bool) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%lockAddress : @storage
                        PAIR;       # pair address (big_map address (pair int bool)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%lockAddress : @storage
                        PAIR;       # pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%lockAddress : @storage
                        PAIR;       # pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%lockAddress : @storage
                        PAIR;       # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%lockAddress : @storage
                        DUG 2;      # @parameter%lockAddress : @storage : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DROP 2;     # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                      }; # pair (pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair int address) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    NIL operation; # list operation : pair (pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair int address) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                  }; # list operation : @storage
              }
              {
                IF_LEFT
                  {
                    IF_LEFT
                      {
                        # Entry point: mint # @parameter%mint : @storage
                        # sp.verify(sp.sender == self.data.administrator) # @parameter%mint : @storage
                        SWAP;       # @storage : @parameter%mint
                        DUP;        # @storage : @storage : @parameter%mint
                        DUG 2;      # @storage : @parameter%mint : @storage
                        CAAAAR;     # address : @parameter%mint : @storage
                        SENDER;     # address : address : @parameter%mint : @storage
                        COMPARE;    # int : @parameter%mint : @storage
                        EQ;         # bool : @parameter%mint : @storage
                        IF
                          {}
                          {
                            PUSH string "WrongCondition: sp.sender == self.data.administrator"; # string : @parameter%mint : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%mint : @storage
                        # sp.verify(((params.amount + (self.data.saleLimit - self.data.soldToken)) + self.data.circulatingSupply) <= self.data.supplyLimit) # @parameter%mint : @storage
                        SWAP;       # @storage : @parameter%mint
                        DUP;        # @storage : @storage : @parameter%mint
                        DUG 2;      # @storage : @parameter%mint : @storage
                        CDDAAR;     # int : @parameter%mint : @storage
                        DIG 2;      # @storage : int : @parameter%mint
                        DUP;        # @storage : @storage : int : @parameter%mint
                        DUG 3;      # @storage : int : @parameter%mint : @storage
                        CAADAR;     # int : int : @parameter%mint : @storage
                        DIG 3;      # @storage : int : int : @parameter%mint
                        DUP;        # @storage : @storage : int : int : @parameter%mint
                        DUG 4;      # @storage : int : int : @parameter%mint : @storage
                        CDADDR;     # int : int : int : @parameter%mint : @storage
                        DIG 4;      # @storage : int : int : int : @parameter%mint
                        DUP;        # @storage : @storage : int : int : int : @parameter%mint
                        DUG 5;      # @storage : int : int : int : @parameter%mint : @storage
                        CDAAAR;     # int : int : int : int : @parameter%mint : @storage
                        SUB;        # int : int : int : @parameter%mint : @storage
                        DIG 3;      # @parameter%mint : int : int : int : @storage
                        DUP;        # @parameter%mint : @parameter%mint : int : int : int : @storage
                        DUG 4;      # @parameter%mint : int : int : int : @parameter%mint : @storage
                        CAR;        # int : int : int : int : @parameter%mint : @storage
                        ADD;        # int : int : int : @parameter%mint : @storage
                        ADD;        # int : int : @parameter%mint : @storage
                        COMPARE;    # int : @parameter%mint : @storage
                        LE;         # bool : @parameter%mint : @storage
                        IF
                          {}
                          {
                            PUSH string "WrongCondition: ((params.amount + (self.data.saleLimit - self.data.soldToken)) + self.data.circulatingSupply) <= self.data.supplyLimit"; # string : @parameter%mint : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%mint : @storage
                        # if ~ (self.data.balances.contains(params.toAddr)): # @parameter%mint : @storage
                        SWAP;       # @storage : @parameter%mint
                        DUP;        # @storage : @storage : @parameter%mint
                        DUG 2;      # @storage : @parameter%mint : @storage
                        CAAADR;     # big_map address (pair (int %balance) (bool %lock)) : @parameter%mint : @storage
                        SWAP;       # @parameter%mint : big_map address (pair (int %balance) (bool %lock)) : @storage
                        DUP;        # @parameter%mint : @parameter%mint : big_map address (pair (int %balance) (bool %lock)) : @storage
                        DUG 2;      # @parameter%mint : big_map address (pair (int %balance) (bool %lock)) : @parameter%mint : @storage
                        CDR;        # address : big_map address (pair (int %balance) (bool %lock)) : @parameter%mint : @storage
                        MEM;        # bool : @parameter%mint : @storage
                        IF
                          {}
                          {
                            # self.data.balances[params.toAddr] = sp.record(balance = 0, lock = False) # @parameter%mint : @storage
                            SWAP;       # @storage : @parameter%mint
                            DUP;        # @storage : @storage : @parameter%mint
                            DUG 2;      # @storage : @parameter%mint : @storage
                            DUP;        # @storage : @storage : @parameter%mint : @storage
                            CDR;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage : @parameter%mint : @storage
                            SWAP;       # @storage : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                            CAR;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                            DUP;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                            CDR;        # pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                            SWAP;       # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                            CAR;        # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                            DUP;        # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                            CDR;        # pair (int %circulatingSupply) (address %covir) : pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                            SWAP;       # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                            CAR;        # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                            DUP;        # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                            CAR;        # address : pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                            SWAP;       # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                            CDR;        # big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                            PUSH (option (pair (int %balance) (bool %lock))) (Some (Pair 0 False)); # option (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                            DIG 6;      # @parameter%mint : option (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                            DUP;        # @parameter%mint : @parameter%mint : option (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                            DUG 7;      # @parameter%mint : option (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                            CDR;        # address : option (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                            UPDATE;     # big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                            SWAP;       # address : big_map address (pair (int %balance) (bool %lock)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                            PAIR;       # pair address (big_map address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                            PAIR;       # pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                            PAIR;       # pair (pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                            PAIR;       # pair (pair (pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%mint : @storage
                            DUG 2;      # @parameter%mint : @storage : pair (pair (pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            SWAP;       # @storage : @parameter%mint : pair (pair (pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            DROP;       # @parameter%mint : pair (pair (pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                          }; # @parameter%mint : @storage
                        # self.data.balances[params.toAddr].balance += params.amount # @parameter%mint : @storage
                        SWAP;       # @storage : @parameter%mint
                        DUP;        # @storage : @storage : @parameter%mint
                        DUG 2;      # @storage : @parameter%mint : @storage
                        DUP;        # @storage : @storage : @parameter%mint : @storage
                        CDR;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage : @parameter%mint : @storage
                        SWAP;       # @storage : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        CAR;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        DUP;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        CDR;        # pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        SWAP;       # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        CAR;        # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        DUP;        # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        CDR;        # pair (int %circulatingSupply) (address %covir) : pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        SWAP;       # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        CAR;        # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        DUP;        # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        CAR;        # address : pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        SWAP;       # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        CDR;        # big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        DUP;        # big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        DIG 6;      # @parameter%mint : big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                        DUP;        # @parameter%mint : @parameter%mint : big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                        DUG 7;      # @parameter%mint : big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        CDR;        # address : big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        DUP;        # address : address : big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        DUG 2;      # address : big_map address (pair (int %balance) (bool %lock)) : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        GET;        # option (pair (int %balance) (bool %lock)) : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        IF_SOME
                          {
                            # of_some: set_in_top-any # @some : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                          }
                          {
                            PUSH string "set_in_top-any"; # string : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                            FAILWITH;   # FAILED
                          }; # @some : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        CDR;        # bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        DIG 7;      # @parameter%mint : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                        DUP;        # @parameter%mint : @parameter%mint : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                        DUG 8;      # @parameter%mint : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        CAR;        # int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        DIG 9;      # @storage : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint
                        DUP;        # @storage : @storage : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint
                        DUG 10;     # @storage : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        CAAADR;     # big_map address (pair (int %balance) (bool %lock)) : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        DIG 9;      # @parameter%mint : big_map address (pair (int %balance) (bool %lock)) : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                        DUP;        # @parameter%mint : @parameter%mint : big_map address (pair (int %balance) (bool %lock)) : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                        DUG 10;     # @parameter%mint : big_map address (pair (int %balance) (bool %lock)) : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        CDR;        # address : big_map address (pair (int %balance) (bool %lock)) : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        GET;        # option (pair (int %balance) (bool %lock)) : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        IF_SOME
                          {
                            # of_some: Get-item:112 # @some : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                          }
                          {
                            PUSH string "Get-item:112"; # string : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                            FAILWITH;   # FAILED
                          }; # @some : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        CAR;        # int : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        ADD;        # int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        PAIR;       # pair int bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        SOME;       # option (pair int bool) : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        SWAP;       # address : option (pair int bool) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        UPDATE;     # big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        SWAP;       # address : big_map address (pair int bool) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        PAIR;       # pair address (big_map address (pair int bool)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        PAIR;       # pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        PAIR;       # pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : @storage
                        PAIR;       # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%mint : @storage
                        DUG 2;      # @parameter%mint : @storage : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # @storage : @parameter%mint : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DROP;       # @parameter%mint : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        # self.data.circulatingSupply += params.amount # @parameter%mint : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%mint
                        DUP;        # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%mint
                        DUG 2;      # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%mint : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUP;        # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%mint : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CDR;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%mint : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CAR;        # pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUP;        # pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CDR;        # pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CAR;        # pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUP;        # pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CAR;        # pair address (big_map address (pair int bool)) : pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CDDR;       # address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DIG 4;      # @parameter%mint : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUP;        # @parameter%mint : @parameter%mint : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUG 5;      # @parameter%mint : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CAR;        # int : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DIG 6;      # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : int : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint
                        DUP;        # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : int : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint
                        DUG 7;      # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : int : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CAADAR;     # int : int : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        ADD;        # int : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        PAIR;       # pair int address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # pair address (big_map address (pair int bool)) : pair int address : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        PAIR;       # pair (pair address (big_map address (pair int bool))) (pair int address) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        PAIR;       # pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%mint : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        PAIR;       # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%mint : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUG 2;      # @parameter%mint : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DROP 2;     # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                      }
                      {
                        # Entry point: offchainSale # @parameter%offchainSale : @storage
                        # sp.verify(sp.sender == self.data.saleManager) # @parameter%offchainSale : @storage
                        SWAP;       # @storage : @parameter%offchainSale
                        DUP;        # @storage : @storage : @parameter%offchainSale
                        DUG 2;      # @storage : @parameter%offchainSale : @storage
                        CDAADR;     # address : @parameter%offchainSale : @storage
                        SENDER;     # address : address : @parameter%offchainSale : @storage
                        COMPARE;    # int : @parameter%offchainSale : @storage
                        EQ;         # bool : @parameter%offchainSale : @storage
                        IF
                          {}
                          {
                            PUSH string "WrongCondition: sp.sender == self.data.saleManager"; # string : @parameter%offchainSale : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%offchainSale : @storage
                        # if self.data.balances.contains(params.address): # @parameter%offchainSale : @storage
                        SWAP;       # @storage : @parameter%offchainSale
                        DUP;        # @storage : @storage : @parameter%offchainSale
                        DUG 2;      # @storage : @parameter%offchainSale : @storage
                        CAAADR;     # big_map address (pair (int %balance) (bool %lock)) : @parameter%offchainSale : @storage
                        SWAP;       # @parameter%offchainSale : big_map address (pair (int %balance) (bool %lock)) : @storage
                        DUP;        # @parameter%offchainSale : @parameter%offchainSale : big_map address (pair (int %balance) (bool %lock)) : @storage
                        DUG 2;      # @parameter%offchainSale : big_map address (pair (int %balance) (bool %lock)) : @parameter%offchainSale : @storage
                        CAR;        # address : big_map address (pair (int %balance) (bool %lock)) : @parameter%offchainSale : @storage
                        MEM;        # bool : @parameter%offchainSale : @storage
                        IF
                          {
                            # sp.verify(~ self.data.balances[params.address].lock) # @parameter%offchainSale : @storage
                            SWAP;       # @storage : @parameter%offchainSale
                            DUP;        # @storage : @storage : @parameter%offchainSale
                            DUG 2;      # @storage : @parameter%offchainSale : @storage
                            CAAADR;     # big_map address (pair (int %balance) (bool %lock)) : @parameter%offchainSale : @storage
                            SWAP;       # @parameter%offchainSale : big_map address (pair (int %balance) (bool %lock)) : @storage
                            DUP;        # @parameter%offchainSale : @parameter%offchainSale : big_map address (pair (int %balance) (bool %lock)) : @storage
                            DUG 2;      # @parameter%offchainSale : big_map address (pair (int %balance) (bool %lock)) : @parameter%offchainSale : @storage
                            CAR;        # address : big_map address (pair (int %balance) (bool %lock)) : @parameter%offchainSale : @storage
                            GET;        # option (pair (int %balance) (bool %lock)) : @parameter%offchainSale : @storage
                            IF_SOME
                              {
                                # of_some: Get-item:94 # @some : @parameter%offchainSale : @storage
                              }
                              {
                                PUSH string "Get-item:94"; # string : @parameter%offchainSale : @storage
                                FAILWITH;   # FAILED
                              }; # @some : @parameter%offchainSale : @storage
                            CDR;        # bool : @parameter%offchainSale : @storage
                            IF
                              {
                                PUSH string "WrongCondition: ~ self.data.balances[params.address].lock"; # string : @parameter%offchainSale : @storage
                                FAILWITH;   # FAILED
                              }
                              {}; # @parameter%offchainSale : @storage
                          }
                          {}; # @parameter%offchainSale : @storage
                        # sp.verify((self.data.soldToken + params.amount) <= self.data.saleLimit) # @parameter%offchainSale : @storage
                        SWAP;       # @storage : @parameter%offchainSale
                        DUP;        # @storage : @storage : @parameter%offchainSale
                        DUG 2;      # @storage : @parameter%offchainSale : @storage
                        CDAAAR;     # int : @parameter%offchainSale : @storage
                        SWAP;       # @parameter%offchainSale : int : @storage
                        DUP;        # @parameter%offchainSale : @parameter%offchainSale : int : @storage
                        DUG 2;      # @parameter%offchainSale : int : @parameter%offchainSale : @storage
                        CDR;        # int : int : @parameter%offchainSale : @storage
                        DIG 3;      # @storage : int : int : @parameter%offchainSale
                        DUP;        # @storage : @storage : int : int : @parameter%offchainSale
                        DUG 4;      # @storage : int : int : @parameter%offchainSale : @storage
                        CDADDR;     # int : int : int : @parameter%offchainSale : @storage
                        ADD;        # int : int : @parameter%offchainSale : @storage
                        COMPARE;    # int : @parameter%offchainSale : @storage
                        LE;         # bool : @parameter%offchainSale : @storage
                        IF
                          {}
                          {
                            PUSH string "WrongCondition: (self.data.soldToken + params.amount) <= self.data.saleLimit"; # string : @parameter%offchainSale : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%offchainSale : @storage
                        # if ~ (self.data.balances.contains(params.address)): # @parameter%offchainSale : @storage
                        SWAP;       # @storage : @parameter%offchainSale
                        DUP;        # @storage : @storage : @parameter%offchainSale
                        DUG 2;      # @storage : @parameter%offchainSale : @storage
                        CAAADR;     # big_map address (pair (int %balance) (bool %lock)) : @parameter%offchainSale : @storage
                        SWAP;       # @parameter%offchainSale : big_map address (pair (int %balance) (bool %lock)) : @storage
                        DUP;        # @parameter%offchainSale : @parameter%offchainSale : big_map address (pair (int %balance) (bool %lock)) : @storage
                        DUG 2;      # @parameter%offchainSale : big_map address (pair (int %balance) (bool %lock)) : @parameter%offchainSale : @storage
                        CAR;        # address : big_map address (pair (int %balance) (bool %lock)) : @parameter%offchainSale : @storage
                        MEM;        # bool : @parameter%offchainSale : @storage
                        IF
                          {}
                          {
                            # self.data.balances[params.address] = sp.record(balance = 0, lock = False) # @parameter%offchainSale : @storage
                            SWAP;       # @storage : @parameter%offchainSale
                            DUP;        # @storage : @storage : @parameter%offchainSale
                            DUG 2;      # @storage : @parameter%offchainSale : @storage
                            DUP;        # @storage : @storage : @parameter%offchainSale : @storage
                            CDR;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage : @parameter%offchainSale : @storage
                            SWAP;       # @storage : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                            CAR;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                            DUP;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                            CDR;        # pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                            SWAP;       # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                            CAR;        # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                            DUP;        # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                            CDR;        # pair (int %circulatingSupply) (address %covir) : pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                            SWAP;       # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                            CAR;        # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                            DUP;        # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                            CAR;        # address : pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                            SWAP;       # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                            CDR;        # big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                            PUSH (option (pair (int %balance) (bool %lock))) (Some (Pair 0 False)); # option (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                            DIG 6;      # @parameter%offchainSale : option (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                            DUP;        # @parameter%offchainSale : @parameter%offchainSale : option (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                            DUG 7;      # @parameter%offchainSale : option (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                            CAR;        # address : option (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                            UPDATE;     # big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                            SWAP;       # address : big_map address (pair (int %balance) (bool %lock)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                            PAIR;       # pair address (big_map address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                            PAIR;       # pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                            PAIR;       # pair (pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                            PAIR;       # pair (pair (pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%offchainSale : @storage
                            DUG 2;      # @parameter%offchainSale : @storage : pair (pair (pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            SWAP;       # @storage : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            DROP;       # @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                          }; # @parameter%offchainSale : @storage
                        # self.data.balances[params.address].balance += params.amount # @parameter%offchainSale : @storage
                        SWAP;       # @storage : @parameter%offchainSale
                        DUP;        # @storage : @storage : @parameter%offchainSale
                        DUG 2;      # @storage : @parameter%offchainSale : @storage
                        DUP;        # @storage : @storage : @parameter%offchainSale : @storage
                        CDR;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage : @parameter%offchainSale : @storage
                        SWAP;       # @storage : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        CAR;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        DUP;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        CDR;        # pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        SWAP;       # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        CAR;        # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        DUP;        # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        CDR;        # pair (int %circulatingSupply) (address %covir) : pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        SWAP;       # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        CAR;        # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        DUP;        # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        CAR;        # address : pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        SWAP;       # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        CDR;        # big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        DUP;        # big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        DIG 6;      # @parameter%offchainSale : big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                        DUP;        # @parameter%offchainSale : @parameter%offchainSale : big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                        DUG 7;      # @parameter%offchainSale : big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        CAR;        # address : big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        DUP;        # address : address : big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        DUG 2;      # address : big_map address (pair (int %balance) (bool %lock)) : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        GET;        # option (pair (int %balance) (bool %lock)) : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        IF_SOME
                          {
                            # of_some: set_in_top-any # @some : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                          }
                          {
                            PUSH string "set_in_top-any"; # string : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                            FAILWITH;   # FAILED
                          }; # @some : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        CDR;        # bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        DIG 7;      # @parameter%offchainSale : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                        DUP;        # @parameter%offchainSale : @parameter%offchainSale : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                        DUG 8;      # @parameter%offchainSale : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        CDR;        # int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        DIG 9;      # @storage : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale
                        DUP;        # @storage : @storage : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale
                        DUG 10;     # @storage : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        CAAADR;     # big_map address (pair (int %balance) (bool %lock)) : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        DIG 9;      # @parameter%offchainSale : big_map address (pair (int %balance) (bool %lock)) : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                        DUP;        # @parameter%offchainSale : @parameter%offchainSale : big_map address (pair (int %balance) (bool %lock)) : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                        DUG 10;     # @parameter%offchainSale : big_map address (pair (int %balance) (bool %lock)) : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        CAR;        # address : big_map address (pair (int %balance) (bool %lock)) : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        GET;        # option (pair (int %balance) (bool %lock)) : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        IF_SOME
                          {
                            # of_some: Get-item:94 # @some : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                          }
                          {
                            PUSH string "Get-item:94"; # string : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                            FAILWITH;   # FAILED
                          }; # @some : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        CAR;        # int : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        ADD;        # int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        PAIR;       # pair int bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        SOME;       # option (pair int bool) : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        SWAP;       # address : option (pair int bool) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        UPDATE;     # big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        SWAP;       # address : big_map address (pair int bool) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        PAIR;       # pair address (big_map address (pair int bool)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        PAIR;       # pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        PAIR;       # pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : @storage
                        PAIR;       # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%offchainSale : @storage
                        DUG 2;      # @parameter%offchainSale : @storage : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # @storage : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DROP;       # @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        # self.data.circulatingSupply += params.amount # @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%offchainSale
                        DUP;        # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%offchainSale
                        DUG 2;      # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUP;        # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CDR;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CAR;        # pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUP;        # pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CDR;        # pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CAR;        # pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUP;        # pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CAR;        # pair address (big_map address (pair int bool)) : pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CDDR;       # address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DIG 4;      # @parameter%offchainSale : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUP;        # @parameter%offchainSale : @parameter%offchainSale : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUG 5;      # @parameter%offchainSale : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CDR;        # int : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DIG 6;      # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : int : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale
                        DUP;        # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : int : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale
                        DUG 7;      # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : int : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CAADAR;     # int : int : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        ADD;        # int : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        PAIR;       # pair int address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # pair address (big_map address (pair int bool)) : pair int address : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        PAIR;       # pair (pair address (big_map address (pair int bool))) (pair int address) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        PAIR;       # pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        PAIR;       # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUG 2;      # @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DROP;       # @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        # self.data.soldToken += params.amount # @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%offchainSale
                        DUP;        # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%offchainSale
                        DUG 2;      # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUP;        # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CAR;        # pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CDR;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUP;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CDR;        # pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CAR;        # pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUP;        # pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CAR;        # pair (int %saleLimit) (address %saleManager) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CDAR;       # bool : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DIG 4;      # @parameter%offchainSale : bool : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUP;        # @parameter%offchainSale : @parameter%offchainSale : bool : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUG 5;      # @parameter%offchainSale : bool : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CDR;        # int : bool : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DIG 6;      # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : int : bool : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%offchainSale
                        DUP;        # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : int : bool : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%offchainSale
                        DUG 7;      # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : int : bool : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CDADDR;     # int : int : bool : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        ADD;        # int : bool : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # bool : int : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        PAIR;       # pair bool int : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # pair (int %saleLimit) (address %saleManager) : pair bool int : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        PAIR;       # pair (pair (int %saleLimit) (address %saleManager)) (pair bool int) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        PAIR;       # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair bool int)) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair bool int)) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        PAIR;       # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair bool int)) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUG 2;      # @parameter%offchainSale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair bool int)) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DROP 2;     # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair bool int)) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                      }; # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                  }
                  {
                    IF_LEFT
                      {
                        # Entry point: pauseSale # @parameter%pauseSale : @storage
                        # sp.verify(sp.sender == self.data.administrator) # @parameter%pauseSale : @storage
                        SWAP;       # @storage : @parameter%pauseSale
                        DUP;        # @storage : @storage : @parameter%pauseSale
                        DUG 2;      # @storage : @parameter%pauseSale : @storage
                        CAAAAR;     # address : @parameter%pauseSale : @storage
                        SENDER;     # address : address : @parameter%pauseSale : @storage
                        COMPARE;    # int : @parameter%pauseSale : @storage
                        EQ;         # bool : @parameter%pauseSale : @storage
                        IF
                          {}
                          {
                            PUSH string "WrongCondition: sp.sender == self.data.administrator"; # string : @parameter%pauseSale : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%pauseSale : @storage
                        # self.data.saleStatus = False # @parameter%pauseSale : @storage
                        SWAP;       # @storage : @parameter%pauseSale
                        DUP;        # @storage : @storage : @parameter%pauseSale
                        DUG 2;      # @storage : @parameter%pauseSale : @storage
                        DUP;        # @storage : @storage : @parameter%pauseSale : @storage
                        CAR;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @storage : @parameter%pauseSale : @storage
                        SWAP;       # @storage : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%pauseSale : @storage
                        CDR;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%pauseSale : @storage
                        DUP;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%pauseSale : @storage
                        CDR;        # pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%pauseSale : @storage
                        SWAP;       # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%pauseSale : @storage
                        CAR;        # pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%pauseSale : @storage
                        DUP;        # pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%pauseSale : @storage
                        CAR;        # pair (int %saleLimit) (address %saleManager) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%pauseSale : @storage
                        SWAP;       # pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%pauseSale : @storage
                        CDDR;       # int : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%pauseSale : @storage
                        PUSH bool False; # bool : int : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%pauseSale : @storage
                        PAIR;       # pair bool int : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%pauseSale : @storage
                        SWAP;       # pair (int %saleLimit) (address %saleManager) : pair bool int : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%pauseSale : @storage
                        PAIR;       # pair (pair (int %saleLimit) (address %saleManager)) (pair bool int) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%pauseSale : @storage
                        PAIR;       # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair bool int)) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%pauseSale : @storage
                        SWAP;       # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair bool int)) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%pauseSale : @storage
                        PAIR;       # pair (pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair bool int)) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%pauseSale : @storage
                        DUG 2;      # @parameter%pauseSale : @storage : pair (pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair bool int)) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DROP 2;     # pair (pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair bool int)) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                      }
                      {
                        # Entry point: pauseTransfer # @parameter%pauseTransfer : @storage
                        # sp.verify(sp.sender == self.data.administrator) # @parameter%pauseTransfer : @storage
                        SWAP;       # @storage : @parameter%pauseTransfer
                        DUP;        # @storage : @storage : @parameter%pauseTransfer
                        DUG 2;      # @storage : @parameter%pauseTransfer : @storage
                        CAAAAR;     # address : @parameter%pauseTransfer : @storage
                        SENDER;     # address : address : @parameter%pauseTransfer : @storage
                        COMPARE;    # int : @parameter%pauseTransfer : @storage
                        EQ;         # bool : @parameter%pauseTransfer : @storage
                        IF
                          {}
                          {
                            PUSH string "WrongCondition: sp.sender == self.data.administrator"; # string : @parameter%pauseTransfer : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%pauseTransfer : @storage
                        # self.data.transferStatus = False # @parameter%pauseTransfer : @storage
                        SWAP;       # @storage : @parameter%pauseTransfer
                        DUP;        # @storage : @storage : @parameter%pauseTransfer
                        DUG 2;      # @storage : @parameter%pauseTransfer : @storage
                        DUP;        # @storage : @storage : @parameter%pauseTransfer : @storage
                        CAR;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @storage : @parameter%pauseTransfer : @storage
                        SWAP;       # @storage : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%pauseTransfer : @storage
                        CDR;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%pauseTransfer : @storage
                        DUP;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%pauseTransfer : @storage
                        CAR;        # pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%pauseTransfer : @storage
                        SWAP;       # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%pauseTransfer : @storage
                        CDR;        # pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%pauseTransfer : @storage
                        DUP;        # pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%pauseTransfer : @storage
                        CAR;        # pair (int %supplyLimit) (string %tokenName) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%pauseTransfer : @storage
                        SWAP;       # pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (int %supplyLimit) (string %tokenName) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%pauseTransfer : @storage
                        CDAR;       # string : pair (int %supplyLimit) (string %tokenName) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%pauseTransfer : @storage
                        PUSH bool False; # bool : string : pair (int %supplyLimit) (string %tokenName) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%pauseTransfer : @storage
                        SWAP;       # string : bool : pair (int %supplyLimit) (string %tokenName) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%pauseTransfer : @storage
                        PAIR;       # pair string bool : pair (int %supplyLimit) (string %tokenName) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%pauseTransfer : @storage
                        SWAP;       # pair (int %supplyLimit) (string %tokenName) : pair string bool : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%pauseTransfer : @storage
                        PAIR;       # pair (pair (int %supplyLimit) (string %tokenName)) (pair string bool) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%pauseTransfer : @storage
                        SWAP;       # pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (int %supplyLimit) (string %tokenName)) (pair string bool) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%pauseTransfer : @storage
                        PAIR;       # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair string bool)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%pauseTransfer : @storage
                        SWAP;       # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair string bool)) : @parameter%pauseTransfer : @storage
                        PAIR;       # pair (pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair string bool))) : @parameter%pauseTransfer : @storage
                        DUG 2;      # @parameter%pauseTransfer : @storage : pair (pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair string bool)))
                        DROP 2;     # pair (pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair string bool)))
                      }; # pair (pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair bool int)) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                  }; # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                NIL operation; # list operation : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
              }; # list operation : @storage
          }
          {
            IF_LEFT
              {
                IF_LEFT
                  {
                    # Entry point: resumeSale # @parameter%resumeSale : @storage
                    # sp.verify(sp.sender == self.data.administrator) # @parameter%resumeSale : @storage
                    SWAP;       # @storage : @parameter%resumeSale
                    DUP;        # @storage : @storage : @parameter%resumeSale
                    DUG 2;      # @storage : @parameter%resumeSale : @storage
                    CAAAAR;     # address : @parameter%resumeSale : @storage
                    SENDER;     # address : address : @parameter%resumeSale : @storage
                    COMPARE;    # int : @parameter%resumeSale : @storage
                    EQ;         # bool : @parameter%resumeSale : @storage
                    IF
                      {}
                      {
                        PUSH string "WrongCondition: sp.sender == self.data.administrator"; # string : @parameter%resumeSale : @storage
                        FAILWITH;   # FAILED
                      }; # @parameter%resumeSale : @storage
                    # self.data.saleStatus = True # @parameter%resumeSale : @storage
                    SWAP;       # @storage : @parameter%resumeSale
                    DUP;        # @storage : @storage : @parameter%resumeSale
                    DUG 2;      # @storage : @parameter%resumeSale : @storage
                    DUP;        # @storage : @storage : @parameter%resumeSale : @storage
                    CAR;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @storage : @parameter%resumeSale : @storage
                    SWAP;       # @storage : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%resumeSale : @storage
                    CDR;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%resumeSale : @storage
                    DUP;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%resumeSale : @storage
                    CDR;        # pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%resumeSale : @storage
                    SWAP;       # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%resumeSale : @storage
                    CAR;        # pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%resumeSale : @storage
                    DUP;        # pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%resumeSale : @storage
                    CAR;        # pair (int %saleLimit) (address %saleManager) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%resumeSale : @storage
                    SWAP;       # pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%resumeSale : @storage
                    CDDR;       # int : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%resumeSale : @storage
                    PUSH bool True; # bool : int : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%resumeSale : @storage
                    PAIR;       # pair bool int : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%resumeSale : @storage
                    SWAP;       # pair (int %saleLimit) (address %saleManager) : pair bool int : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%resumeSale : @storage
                    PAIR;       # pair (pair (int %saleLimit) (address %saleManager)) (pair bool int) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%resumeSale : @storage
                    PAIR;       # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair bool int)) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%resumeSale : @storage
                    SWAP;       # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair bool int)) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%resumeSale : @storage
                    PAIR;       # pair (pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair bool int)) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%resumeSale : @storage
                    DUG 2;      # @parameter%resumeSale : @storage : pair (pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair bool int)) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                    DROP 2;     # pair (pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair bool int)) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                  }
                  {
                    IF_LEFT
                      {
                        # Entry point: resumeTransfer # @parameter%resumeTransfer : @storage
                        # sp.verify(sp.sender == self.data.administrator) # @parameter%resumeTransfer : @storage
                        SWAP;       # @storage : @parameter%resumeTransfer
                        DUP;        # @storage : @storage : @parameter%resumeTransfer
                        DUG 2;      # @storage : @parameter%resumeTransfer : @storage
                        CAAAAR;     # address : @parameter%resumeTransfer : @storage
                        SENDER;     # address : address : @parameter%resumeTransfer : @storage
                        COMPARE;    # int : @parameter%resumeTransfer : @storage
                        EQ;         # bool : @parameter%resumeTransfer : @storage
                        IF
                          {}
                          {
                            PUSH string "WrongCondition: sp.sender == self.data.administrator"; # string : @parameter%resumeTransfer : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%resumeTransfer : @storage
                        # self.data.transferStatus = True # @parameter%resumeTransfer : @storage
                        SWAP;       # @storage : @parameter%resumeTransfer
                        DUP;        # @storage : @storage : @parameter%resumeTransfer
                        DUG 2;      # @storage : @parameter%resumeTransfer : @storage
                        DUP;        # @storage : @storage : @parameter%resumeTransfer : @storage
                        CAR;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @storage : @parameter%resumeTransfer : @storage
                        SWAP;       # @storage : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%resumeTransfer : @storage
                        CDR;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%resumeTransfer : @storage
                        DUP;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%resumeTransfer : @storage
                        CAR;        # pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%resumeTransfer : @storage
                        SWAP;       # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%resumeTransfer : @storage
                        CDR;        # pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%resumeTransfer : @storage
                        DUP;        # pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%resumeTransfer : @storage
                        CAR;        # pair (int %supplyLimit) (string %tokenName) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%resumeTransfer : @storage
                        SWAP;       # pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (int %supplyLimit) (string %tokenName) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%resumeTransfer : @storage
                        CDAR;       # string : pair (int %supplyLimit) (string %tokenName) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%resumeTransfer : @storage
                        PUSH bool True; # bool : string : pair (int %supplyLimit) (string %tokenName) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%resumeTransfer : @storage
                        SWAP;       # string : bool : pair (int %supplyLimit) (string %tokenName) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%resumeTransfer : @storage
                        PAIR;       # pair string bool : pair (int %supplyLimit) (string %tokenName) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%resumeTransfer : @storage
                        SWAP;       # pair (int %supplyLimit) (string %tokenName) : pair string bool : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%resumeTransfer : @storage
                        PAIR;       # pair (pair (int %supplyLimit) (string %tokenName)) (pair string bool) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%resumeTransfer : @storage
                        SWAP;       # pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (int %supplyLimit) (string %tokenName)) (pair string bool) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%resumeTransfer : @storage
                        PAIR;       # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair string bool)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%resumeTransfer : @storage
                        SWAP;       # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair string bool)) : @parameter%resumeTransfer : @storage
                        PAIR;       # pair (pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair string bool))) : @parameter%resumeTransfer : @storage
                        DUG 2;      # @parameter%resumeTransfer : @storage : pair (pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair string bool)))
                        DROP 2;     # pair (pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair string bool)))
                      }
                      {
                        # Entry point: sale # @parameter%sale : @storage
                        # sp.verify(self.data.saleStatus) # @parameter%sale : @storage
                        SWAP;       # @storage : @parameter%sale
                        DUP;        # @storage : @storage : @parameter%sale
                        DUG 2;      # @storage : @parameter%sale : @storage
                        CDADAR;     # bool : @parameter%sale : @storage
                        IF
                          {}
                          {
                            PUSH string "WrongCondition: self.data.saleStatus"; # string : @parameter%sale : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%sale : @storage
                        # if self.data.balances.contains(sp.sender): # @parameter%sale : @storage
                        SWAP;       # @storage : @parameter%sale
                        DUP;        # @storage : @storage : @parameter%sale
                        DUG 2;      # @storage : @parameter%sale : @storage
                        CAAADR;     # big_map address (pair (int %balance) (bool %lock)) : @parameter%sale : @storage
                        SENDER;     # address : big_map address (pair (int %balance) (bool %lock)) : @parameter%sale : @storage
                        MEM;        # bool : @parameter%sale : @storage
                        IF
                          {
                            # sp.verify(~ self.data.balances[sp.sender].lock) # @parameter%sale : @storage
                            SWAP;       # @storage : @parameter%sale
                            DUP;        # @storage : @storage : @parameter%sale
                            DUG 2;      # @storage : @parameter%sale : @storage
                            CAAADR;     # big_map address (pair (int %balance) (bool %lock)) : @parameter%sale : @storage
                            SENDER;     # address : big_map address (pair (int %balance) (bool %lock)) : @parameter%sale : @storage
                            GET;        # option (pair (int %balance) (bool %lock)) : @parameter%sale : @storage
                            IF_SOME
                              {
                                # of_some: Get-item:-1 # @some : @parameter%sale : @storage
                              }
                              {
                                PUSH string "Get-item:-1"; # string : @parameter%sale : @storage
                                FAILWITH;   # FAILED
                              }; # @some : @parameter%sale : @storage
                            CDR;        # bool : @parameter%sale : @storage
                            IF
                              {
                                PUSH string "WrongCondition: ~ self.data.balances[sp.sender].lock"; # string : @parameter%sale : @storage
                                FAILWITH;   # FAILED
                              }
                              {}; # @parameter%sale : @storage
                          }
                          {}; # @parameter%sale : @storage
                        # sp.verify((self.data.soldToken + ((sp.to_int(sp.fst(sp.ediv(sp.amount, sp.mutez(1)).open_some()))) * self.data.ratio)) <= self.data.saleLimit) # @parameter%sale : @storage
                        SWAP;       # @storage : @parameter%sale
                        DUP;        # @storage : @storage : @parameter%sale
                        DUG 2;      # @storage : @parameter%sale : @storage
                        CDAAAR;     # int : @parameter%sale : @storage
                        DIG 2;      # @storage : int : @parameter%sale
                        DUP;        # @storage : @storage : int : @parameter%sale
                        DUG 3;      # @storage : int : @parameter%sale : @storage
                        CADDDR;     # int : int : @parameter%sale : @storage
                        PUSH mutez 1; # mutez : int : int : @parameter%sale : @storage
                        AMOUNT;     # mutez : mutez : int : int : @parameter%sale : @storage
                        EDIV;       # option (pair nat mutez) : int : int : @parameter%sale : @storage
                        IF_SOME
                          {}
                          {
                            PUSH unit Unit; # unit : int : int : @parameter%sale : @storage
                            FAILWITH;   # FAILED
                          }; # @some : int : int : @parameter%sale : @storage
                        CAR;        # nat : int : int : @parameter%sale : @storage
                        INT;        # int : int : int : @parameter%sale : @storage
                        MUL;        # int : int : @parameter%sale : @storage
                        DIG 3;      # @storage : int : int : @parameter%sale
                        DUP;        # @storage : @storage : int : int : @parameter%sale
                        DUG 4;      # @storage : int : int : @parameter%sale : @storage
                        CDADDR;     # int : int : int : @parameter%sale : @storage
                        ADD;        # int : int : @parameter%sale : @storage
                        COMPARE;    # int : @parameter%sale : @storage
                        LE;         # bool : @parameter%sale : @storage
                        IF
                          {}
                          {
                            PUSH string "WrongCondition: (self.data.soldToken + ((sp.to_int(sp.fst(sp.ediv(sp.amount, sp.mutez(1)).open_some()))) * self.data.ratio)) <= self.data.saleLimit"; # string : @parameter%sale : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%sale : @storage
                        # if ~ (self.data.balances.contains(sp.sender)): # @parameter%sale : @storage
                        SWAP;       # @storage : @parameter%sale
                        DUP;        # @storage : @storage : @parameter%sale
                        DUG 2;      # @storage : @parameter%sale : @storage
                        CAAADR;     # big_map address (pair (int %balance) (bool %lock)) : @parameter%sale : @storage
                        SENDER;     # address : big_map address (pair (int %balance) (bool %lock)) : @parameter%sale : @storage
                        MEM;        # bool : @parameter%sale : @storage
                        IF
                          {}
                          {
                            # self.data.balances[sp.sender] = sp.record(balance = 0, lock = False) # @parameter%sale : @storage
                            SWAP;       # @storage : @parameter%sale
                            DUP;        # @storage : @storage : @parameter%sale
                            DUG 2;      # @storage : @parameter%sale : @storage
                            DUP;        # @storage : @storage : @parameter%sale : @storage
                            CDR;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage : @parameter%sale : @storage
                            SWAP;       # @storage : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                            CAR;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                            DUP;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                            CDR;        # pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                            SWAP;       # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                            CAR;        # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                            DUP;        # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                            CDR;        # pair (int %circulatingSupply) (address %covir) : pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                            SWAP;       # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                            CAR;        # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                            DUP;        # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                            CAR;        # address : pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                            SWAP;       # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                            CDR;        # big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                            PUSH (option (pair (int %balance) (bool %lock))) (Some (Pair 0 False)); # option (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                            SENDER;     # address : option (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                            UPDATE;     # big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                            SWAP;       # address : big_map address (pair (int %balance) (bool %lock)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                            PAIR;       # pair address (big_map address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                            PAIR;       # pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                            PAIR;       # pair (pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                            PAIR;       # pair (pair (pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%sale : @storage
                            DUG 2;      # @parameter%sale : @storage : pair (pair (pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            SWAP;       # @storage : @parameter%sale : pair (pair (pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            DROP;       # @parameter%sale : pair (pair (pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                          }; # @parameter%sale : @storage
                        # self.data.balances[sp.sender].balance += (sp.to_int(sp.fst(sp.ediv(sp.amount, sp.mutez(1)).open_some()))) * self.data.ratio # @parameter%sale : @storage
                        SWAP;       # @storage : @parameter%sale
                        DUP;        # @storage : @storage : @parameter%sale
                        DUG 2;      # @storage : @parameter%sale : @storage
                        DUP;        # @storage : @storage : @parameter%sale : @storage
                        CDR;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage : @parameter%sale : @storage
                        SWAP;       # @storage : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        CAR;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        DUP;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        CDR;        # pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        SWAP;       # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        CAR;        # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        DUP;        # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        CDR;        # pair (int %circulatingSupply) (address %covir) : pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        SWAP;       # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        CAR;        # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        DUP;        # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        CAR;        # address : pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        SWAP;       # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        CDR;        # big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        DUP;        # big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        SENDER;     # address : big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        DUP;        # address : address : big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        DUG 2;      # address : big_map address (pair (int %balance) (bool %lock)) : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        GET;        # option (pair (int %balance) (bool %lock)) : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        IF_SOME
                          {
                            # of_some: set_in_top-any # @some : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                          }
                          {
                            PUSH string "set_in_top-any"; # string : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                            FAILWITH;   # FAILED
                          }; # @some : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        CDR;        # bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        DIG 8;      # @storage : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale
                        DUP;        # @storage : @storage : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale
                        DUG 9;      # @storage : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        CADDDR;     # int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        PUSH mutez 1; # mutez : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        AMOUNT;     # mutez : mutez : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        EDIV;       # option (pair nat mutez) : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        IF_SOME
                          {}
                          {
                            PUSH unit Unit; # unit : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                            FAILWITH;   # FAILED
                          }; # @some : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        CAR;        # nat : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        INT;        # int : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        MUL;        # int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        DIG 9;      # @storage : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale
                        DUP;        # @storage : @storage : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale
                        DUG 10;     # @storage : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        CAAADR;     # big_map address (pair (int %balance) (bool %lock)) : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        SENDER;     # address : big_map address (pair (int %balance) (bool %lock)) : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        GET;        # option (pair (int %balance) (bool %lock)) : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        IF_SOME
                          {
                            # of_some: Get-item:-1 # @some : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                          }
                          {
                            PUSH string "Get-item:-1"; # string : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                            FAILWITH;   # FAILED
                          }; # @some : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        CAR;        # int : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        ADD;        # int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        PAIR;       # pair int bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        SOME;       # option (pair int bool) : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        SWAP;       # address : option (pair int bool) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        UPDATE;     # big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        SWAP;       # address : big_map address (pair int bool) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        PAIR;       # pair address (big_map address (pair int bool)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        PAIR;       # pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        PAIR;       # pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : @storage
                        PAIR;       # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%sale : @storage
                        DUG 2;      # @parameter%sale : @storage : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # @storage : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DROP;       # @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        # self.data.circulatingSupply += (sp.to_int(sp.fst(sp.ediv(sp.amount, sp.mutez(1)).open_some()))) * self.data.ratio # @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%sale
                        DUP;        # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%sale
                        DUG 2;      # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUP;        # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CDR;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CAR;        # pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUP;        # pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CDR;        # pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CAR;        # pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUP;        # pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CAR;        # pair address (big_map address (pair int bool)) : pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CDDR;       # address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DIG 5;      # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale
                        DUP;        # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale
                        DUG 6;      # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CADDDR;     # int : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        PUSH mutez 1; # mutez : int : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        AMOUNT;     # mutez : mutez : int : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        EDIV;       # option (pair nat mutez) : int : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        IF_SOME
                          {}
                          {
                            PUSH unit Unit; # unit : int : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            FAILWITH;   # FAILED
                          }; # @some : int : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CAR;        # nat : int : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        INT;        # int : int : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        MUL;        # int : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DIG 6;      # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : int : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale
                        DUP;        # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : int : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale
                        DUG 7;      # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : int : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CAADAR;     # int : int : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        ADD;        # int : address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        PAIR;       # pair int address : pair address (big_map address (pair int bool)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # pair address (big_map address (pair int bool)) : pair int address : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        PAIR;       # pair (pair address (big_map address (pair int bool))) (pair int address) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        PAIR;       # pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        PAIR;       # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUG 2;      # @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DROP;       # @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        # self.data.soldToken += (sp.to_int(sp.fst(sp.ediv(sp.amount, sp.mutez(1)).open_some()))) * self.data.ratio # @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%sale
                        DUP;        # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%sale
                        DUG 2;      # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUP;        # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CAR;        # pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CDR;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUP;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CDR;        # pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CAR;        # pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUP;        # pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CAR;        # pair (int %saleLimit) (address %saleManager) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CDAR;       # bool : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DIG 5;      # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : bool : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%sale
                        DUP;        # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : bool : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%sale
                        DUG 6;      # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : bool : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CADDDR;     # int : bool : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        PUSH mutez 1; # mutez : int : bool : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        AMOUNT;     # mutez : mutez : int : bool : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        EDIV;       # option (pair nat mutez) : int : bool : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        IF_SOME
                          {}
                          {
                            PUSH unit Unit; # unit : int : bool : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            FAILWITH;   # FAILED
                          }; # @some : int : bool : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CAR;        # nat : int : bool : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        INT;        # int : int : bool : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        MUL;        # int : bool : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DIG 6;      # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : int : bool : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%sale
                        DUP;        # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : int : bool : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%sale
                        DUG 7;      # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : int : bool : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CDADDR;     # int : int : bool : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        ADD;        # int : bool : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # bool : int : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        PAIR;       # pair bool int : pair (int %saleLimit) (address %saleManager) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # pair (int %saleLimit) (address %saleManager) : pair bool int : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        PAIR;       # pair (pair (int %saleLimit) (address %saleManager)) (pair bool int) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        PAIR;       # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair bool int)) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair bool int)) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        PAIR;       # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair bool int)) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUG 2;      # @parameter%sale : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair bool int)) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DROP 2;     # pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair bool int)) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                      }; # pair (pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair string bool)))
                  }; # pair (pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair bool int)) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
              }
              {
                IF_LEFT
                  {
                    IF_LEFT
                      {
                        # Entry point: setAdministrator # @parameter%setAdministrator : @storage
                        # sp.verify(sp.sender == self.data.owner) # @parameter%setAdministrator : @storage
                        SWAP;       # @storage : @parameter%setAdministrator
                        DUP;        # @storage : @storage : @parameter%setAdministrator
                        DUG 2;      # @storage : @parameter%setAdministrator : @storage
                        CADDAR;     # address : @parameter%setAdministrator : @storage
                        SENDER;     # address : address : @parameter%setAdministrator : @storage
                        COMPARE;    # int : @parameter%setAdministrator : @storage
                        EQ;         # bool : @parameter%setAdministrator : @storage
                        IF
                          {}
                          {
                            PUSH string "WrongCondition: sp.sender == self.data.owner"; # string : @parameter%setAdministrator : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%setAdministrator : @storage
                        # if ~ (self.data.balances.contains(params)): # @parameter%setAdministrator : @storage
                        SWAP;       # @storage : @parameter%setAdministrator
                        DUP;        # @storage : @storage : @parameter%setAdministrator
                        DUG 2;      # @storage : @parameter%setAdministrator : @storage
                        CAAADR;     # big_map address (pair (int %balance) (bool %lock)) : @parameter%setAdministrator : @storage
                        SWAP;       # @parameter%setAdministrator : big_map address (pair (int %balance) (bool %lock)) : @storage
                        DUP;        # @parameter%setAdministrator : @parameter%setAdministrator : big_map address (pair (int %balance) (bool %lock)) : @storage
                        DUG 2;      # @parameter%setAdministrator : big_map address (pair (int %balance) (bool %lock)) : @parameter%setAdministrator : @storage
                        MEM;        # bool : @parameter%setAdministrator : @storage
                        IF
                          {}
                          {
                            # self.data.balances[params] = sp.record(balance = 0, lock = False) # @parameter%setAdministrator : @storage
                            SWAP;       # @storage : @parameter%setAdministrator
                            DUP;        # @storage : @storage : @parameter%setAdministrator
                            DUG 2;      # @storage : @parameter%setAdministrator : @storage
                            DUP;        # @storage : @storage : @parameter%setAdministrator : @storage
                            CDR;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage : @parameter%setAdministrator : @storage
                            SWAP;       # @storage : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setAdministrator : @storage
                            CAR;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setAdministrator : @storage
                            DUP;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setAdministrator : @storage
                            CDR;        # pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setAdministrator : @storage
                            SWAP;       # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setAdministrator : @storage
                            CAR;        # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setAdministrator : @storage
                            DUP;        # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setAdministrator : @storage
                            CDR;        # pair (int %circulatingSupply) (address %covir) : pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setAdministrator : @storage
                            SWAP;       # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setAdministrator : @storage
                            CAR;        # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setAdministrator : @storage
                            DUP;        # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setAdministrator : @storage
                            CAR;        # address : pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setAdministrator : @storage
                            SWAP;       # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setAdministrator : @storage
                            CDR;        # big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setAdministrator : @storage
                            PUSH (option (pair (int %balance) (bool %lock))) (Some (Pair 0 False)); # option (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setAdministrator : @storage
                            DIG 6;      # @parameter%setAdministrator : option (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                            DUP;        # @parameter%setAdministrator : @parameter%setAdministrator : option (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                            DUG 7;      # @parameter%setAdministrator : option (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setAdministrator : @storage
                            UPDATE;     # big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setAdministrator : @storage
                            SWAP;       # address : big_map address (pair (int %balance) (bool %lock)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setAdministrator : @storage
                            PAIR;       # pair address (big_map address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setAdministrator : @storage
                            PAIR;       # pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setAdministrator : @storage
                            PAIR;       # pair (pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setAdministrator : @storage
                            PAIR;       # pair (pair (pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%setAdministrator : @storage
                            DUG 2;      # @parameter%setAdministrator : @storage : pair (pair (pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            SWAP;       # @storage : @parameter%setAdministrator : pair (pair (pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            DROP;       # @parameter%setAdministrator : pair (pair (pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                          }; # @parameter%setAdministrator : @storage
                        # self.data.administrator = params # @parameter%setAdministrator : @storage
                        SWAP;       # @storage : @parameter%setAdministrator
                        DUP;        # @storage : @storage : @parameter%setAdministrator
                        DUG 2;      # @storage : @parameter%setAdministrator : @storage
                        DUP;        # @storage : @storage : @parameter%setAdministrator : @storage
                        CDR;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage : @parameter%setAdministrator : @storage
                        SWAP;       # @storage : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setAdministrator : @storage
                        CAR;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setAdministrator : @storage
                        DUP;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setAdministrator : @storage
                        CDR;        # pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setAdministrator : @storage
                        SWAP;       # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setAdministrator : @storage
                        CAR;        # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setAdministrator : @storage
                        DUP;        # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setAdministrator : @storage
                        CDR;        # pair (int %circulatingSupply) (address %covir) : pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setAdministrator : @storage
                        SWAP;       # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setAdministrator : @storage
                        CADR;       # big_map address (pair (int %balance) (bool %lock)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setAdministrator : @storage
                        DIG 4;      # @parameter%setAdministrator : big_map address (pair (int %balance) (bool %lock)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                        DUP;        # @parameter%setAdministrator : @parameter%setAdministrator : big_map address (pair (int %balance) (bool %lock)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                        DUG 5;      # @parameter%setAdministrator : big_map address (pair (int %balance) (bool %lock)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setAdministrator : @storage
                        PAIR;       # pair @parameter%setAdministrator (big_map address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setAdministrator : @storage
                        PAIR;       # pair (pair @parameter%setAdministrator (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setAdministrator : @storage
                        PAIR;       # pair (pair (pair @parameter%setAdministrator (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setAdministrator : @storage
                        PAIR;       # pair (pair (pair (pair @parameter%setAdministrator (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%setAdministrator : @storage
                        DUG 2;      # @parameter%setAdministrator : @storage : pair (pair (pair (pair @parameter%setAdministrator (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DROP 2;     # pair (pair (pair (pair @parameter%setAdministrator (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                      }
                      {
                        # Entry point: setManager # @parameter%setManager : @storage
                        # sp.verify(sp.sender == self.data.administrator) # @parameter%setManager : @storage
                        SWAP;       # @storage : @parameter%setManager
                        DUP;        # @storage : @storage : @parameter%setManager
                        DUG 2;      # @storage : @parameter%setManager : @storage
                        CAAAAR;     # address : @parameter%setManager : @storage
                        SENDER;     # address : address : @parameter%setManager : @storage
                        COMPARE;    # int : @parameter%setManager : @storage
                        EQ;         # bool : @parameter%setManager : @storage
                        IF
                          {}
                          {
                            PUSH string "WrongCondition: sp.sender == self.data.administrator"; # string : @parameter%setManager : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%setManager : @storage
                        # if ~ (self.data.balances.contains(params)): # @parameter%setManager : @storage
                        SWAP;       # @storage : @parameter%setManager
                        DUP;        # @storage : @storage : @parameter%setManager
                        DUG 2;      # @storage : @parameter%setManager : @storage
                        CAAADR;     # big_map address (pair (int %balance) (bool %lock)) : @parameter%setManager : @storage
                        SWAP;       # @parameter%setManager : big_map address (pair (int %balance) (bool %lock)) : @storage
                        DUP;        # @parameter%setManager : @parameter%setManager : big_map address (pair (int %balance) (bool %lock)) : @storage
                        DUG 2;      # @parameter%setManager : big_map address (pair (int %balance) (bool %lock)) : @parameter%setManager : @storage
                        MEM;        # bool : @parameter%setManager : @storage
                        IF
                          {}
                          {
                            # self.data.balances[params] = sp.record(balance = 0, lock = False) # @parameter%setManager : @storage
                            SWAP;       # @storage : @parameter%setManager
                            DUP;        # @storage : @storage : @parameter%setManager
                            DUG 2;      # @storage : @parameter%setManager : @storage
                            DUP;        # @storage : @storage : @parameter%setManager : @storage
                            CDR;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage : @parameter%setManager : @storage
                            SWAP;       # @storage : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setManager : @storage
                            CAR;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setManager : @storage
                            DUP;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setManager : @storage
                            CDR;        # pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setManager : @storage
                            SWAP;       # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setManager : @storage
                            CAR;        # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setManager : @storage
                            DUP;        # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setManager : @storage
                            CDR;        # pair (int %circulatingSupply) (address %covir) : pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setManager : @storage
                            SWAP;       # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setManager : @storage
                            CAR;        # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setManager : @storage
                            DUP;        # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setManager : @storage
                            CAR;        # address : pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setManager : @storage
                            SWAP;       # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setManager : @storage
                            CDR;        # big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setManager : @storage
                            PUSH (option (pair (int %balance) (bool %lock))) (Some (Pair 0 False)); # option (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setManager : @storage
                            DIG 6;      # @parameter%setManager : option (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                            DUP;        # @parameter%setManager : @parameter%setManager : option (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                            DUG 7;      # @parameter%setManager : option (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setManager : @storage
                            UPDATE;     # big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setManager : @storage
                            SWAP;       # address : big_map address (pair (int %balance) (bool %lock)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setManager : @storage
                            PAIR;       # pair address (big_map address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setManager : @storage
                            PAIR;       # pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setManager : @storage
                            PAIR;       # pair (pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setManager : @storage
                            PAIR;       # pair (pair (pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%setManager : @storage
                            DUG 2;      # @parameter%setManager : @storage : pair (pair (pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            SWAP;       # @storage : @parameter%setManager : pair (pair (pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            DROP;       # @parameter%setManager : pair (pair (pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                          }; # @parameter%setManager : @storage
                        # self.data.saleManager = params # @parameter%setManager : @storage
                        SWAP;       # @storage : @parameter%setManager
                        DUP;        # @storage : @storage : @parameter%setManager
                        DUG 2;      # @storage : @parameter%setManager : @storage
                        DUP;        # @storage : @storage : @parameter%setManager : @storage
                        CAR;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @storage : @parameter%setManager : @storage
                        SWAP;       # @storage : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%setManager : @storage
                        CDR;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%setManager : @storage
                        DUP;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%setManager : @storage
                        CDR;        # pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%setManager : @storage
                        SWAP;       # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%setManager : @storage
                        CAR;        # pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%setManager : @storage
                        DUP;        # pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%setManager : @storage
                        CDR;        # pair (bool %saleStatus) (int %soldToken) : pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%setManager : @storage
                        SWAP;       # pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken)) : pair (bool %saleStatus) (int %soldToken) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%setManager : @storage
                        CAAR;       # int : pair (bool %saleStatus) (int %soldToken) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%setManager : @storage
                        DIG 4;      # @parameter%setManager : int : pair (bool %saleStatus) (int %soldToken) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @storage
                        DUP;        # @parameter%setManager : @parameter%setManager : int : pair (bool %saleStatus) (int %soldToken) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @storage
                        DUG 5;      # @parameter%setManager : int : pair (bool %saleStatus) (int %soldToken) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%setManager : @storage
                        SWAP;       # int : @parameter%setManager : pair (bool %saleStatus) (int %soldToken) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%setManager : @storage
                        PAIR;       # pair int @parameter%setManager : pair (bool %saleStatus) (int %soldToken) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%setManager : @storage
                        PAIR;       # pair (pair int @parameter%setManager) (pair (bool %saleStatus) (int %soldToken)) : pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%setManager : @storage
                        PAIR;       # pair (pair (pair int @parameter%setManager) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : @parameter%setManager : @storage
                        SWAP;       # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair int @parameter%setManager) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%setManager : @storage
                        PAIR;       # pair (pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair int @parameter%setManager) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%setManager : @storage
                        DUG 2;      # @parameter%setManager : @storage : pair (pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair int @parameter%setManager) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DROP 2;     # pair (pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair int @parameter%setManager) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                      }; # pair (pair (pair (pair @parameter%setAdministrator (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                  }
                  {
                    IF_LEFT
                      {
                        # Entry point: transfer # @parameter%transfer : @storage
                        # sp.verify((sp.sender == self.data.administrator) | (self.data.transferStatus & (params.fromAddr == sp.sender))) # @parameter%transfer : @storage
                        SWAP;       # @storage : @parameter%transfer
                        DUP;        # @storage : @storage : @parameter%transfer
                        DUG 2;      # @storage : @parameter%transfer : @storage
                        CAAAAR;     # address : @parameter%transfer : @storage
                        SENDER;     # address : address : @parameter%transfer : @storage
                        COMPARE;    # int : @parameter%transfer : @storage
                        EQ;         # bool : @parameter%transfer : @storage
                        IF
                          {
                            PUSH bool True; # bool : @parameter%transfer : @storage
                          }
                          {
                            SWAP;       # @storage : @parameter%transfer
                            DUP;        # @storage : @storage : @parameter%transfer
                            DUG 2;      # @storage : @parameter%transfer : @storage
                            CDDDDR;     # bool : @parameter%transfer : @storage
                            IF
                              {
                                DUP;        # @parameter%transfer : @parameter%transfer : @storage
                                CDAR;       # address : @parameter%transfer : @storage
                                SENDER;     # address : address : @parameter%transfer : @storage
                                COMPARE;    # int : @parameter%transfer : @storage
                                EQ;         # bool : @parameter%transfer : @storage
                              }
                              {
                                PUSH bool False; # bool : @parameter%transfer : @storage
                              }; # bool : @parameter%transfer : @storage
                          }; # bool : @parameter%transfer : @storage
                        IF
                          {}
                          {
                            PUSH string "WrongCondition: (sp.sender == self.data.administrator) | (self.data.transferStatus & (params.fromAddr == sp.sender))"; # string : @parameter%transfer : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%transfer : @storage
                        # sp.verify(((self.data.balances.contains(params.fromAddr)) & (~ self.data.balances[params.fromAddr].lock)) & (self.data.balances[params.fromAddr].balance >= params.amount)) # @parameter%transfer : @storage
                        SWAP;       # @storage : @parameter%transfer
                        DUP;        # @storage : @storage : @parameter%transfer
                        DUG 2;      # @storage : @parameter%transfer : @storage
                        CAAADR;     # big_map address (pair (int %balance) (bool %lock)) : @parameter%transfer : @storage
                        SWAP;       # @parameter%transfer : big_map address (pair (int %balance) (bool %lock)) : @storage
                        DUP;        # @parameter%transfer : @parameter%transfer : big_map address (pair (int %balance) (bool %lock)) : @storage
                        DUG 2;      # @parameter%transfer : big_map address (pair (int %balance) (bool %lock)) : @parameter%transfer : @storage
                        CDAR;       # address : big_map address (pair (int %balance) (bool %lock)) : @parameter%transfer : @storage
                        MEM;        # bool : @parameter%transfer : @storage
                        IF
                          {
                            SWAP;       # @storage : @parameter%transfer
                            DUP;        # @storage : @storage : @parameter%transfer
                            DUG 2;      # @storage : @parameter%transfer : @storage
                            CAAADR;     # big_map address (pair (int %balance) (bool %lock)) : @parameter%transfer : @storage
                            SWAP;       # @parameter%transfer : big_map address (pair (int %balance) (bool %lock)) : @storage
                            DUP;        # @parameter%transfer : @parameter%transfer : big_map address (pair (int %balance) (bool %lock)) : @storage
                            DUG 2;      # @parameter%transfer : big_map address (pair (int %balance) (bool %lock)) : @parameter%transfer : @storage
                            CDAR;       # address : big_map address (pair (int %balance) (bool %lock)) : @parameter%transfer : @storage
                            GET;        # option (pair (int %balance) (bool %lock)) : @parameter%transfer : @storage
                            IF_SOME
                              {
                                # of_some: Get-item:10 # @some : @parameter%transfer : @storage
                              }
                              {
                                PUSH string "Get-item:10"; # string : @parameter%transfer : @storage
                                FAILWITH;   # FAILED
                              }; # @some : @parameter%transfer : @storage
                            CDR;        # bool : @parameter%transfer : @storage
                            NOT;        # bool : @parameter%transfer : @storage
                          }
                          {
                            PUSH bool False; # bool : @parameter%transfer : @storage
                          }; # bool : @parameter%transfer : @storage
                        IF
                          {
                            DUP;        # @parameter%transfer : @parameter%transfer : @storage
                            CAR;        # int : @parameter%transfer : @storage
                            DIG 2;      # @storage : int : @parameter%transfer
                            DUP;        # @storage : @storage : int : @parameter%transfer
                            DUG 3;      # @storage : int : @parameter%transfer : @storage
                            CAAADR;     # big_map address (pair (int %balance) (bool %lock)) : int : @parameter%transfer : @storage
                            DIG 2;      # @parameter%transfer : big_map address (pair (int %balance) (bool %lock)) : int : @storage
                            DUP;        # @parameter%transfer : @parameter%transfer : big_map address (pair (int %balance) (bool %lock)) : int : @storage
                            DUG 3;      # @parameter%transfer : big_map address (pair (int %balance) (bool %lock)) : int : @parameter%transfer : @storage
                            CDAR;       # address : big_map address (pair (int %balance) (bool %lock)) : int : @parameter%transfer : @storage
                            GET;        # option (pair (int %balance) (bool %lock)) : int : @parameter%transfer : @storage
                            IF_SOME
                              {
                                # of_some: Get-item:10 # @some : int : @parameter%transfer : @storage
                              }
                              {
                                PUSH string "Get-item:10"; # string : int : @parameter%transfer : @storage
                                FAILWITH;   # FAILED
                              }; # @some : int : @parameter%transfer : @storage
                            CAR;        # int : int : @parameter%transfer : @storage
                            COMPARE;    # int : @parameter%transfer : @storage
                            GE;         # bool : @parameter%transfer : @storage
                          }
                          {
                            PUSH bool False; # bool : @parameter%transfer : @storage
                          }; # bool : @parameter%transfer : @storage
                        IF
                          {}
                          {
                            PUSH string "WrongCondition: ((self.data.balances.contains(params.fromAddr)) & (~ self.data.balances[params.fromAddr].lock)) & (self.data.balances[params.fromAddr].balance >= params.amount)"; # string : @parameter%transfer : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%transfer : @storage
                        # sp.verify(params.amount > 0) # @parameter%transfer : @storage
                        DUP;        # @parameter%transfer : @parameter%transfer : @storage
                        CAR;        # int : @parameter%transfer : @storage
                        PUSH int 0; # int : int : @parameter%transfer : @storage
                        COMPARE;    # int : @parameter%transfer : @storage
                        LT;         # bool : @parameter%transfer : @storage
                        IF
                          {}
                          {
                            PUSH string "WrongCondition: params.amount > 0"; # string : @parameter%transfer : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%transfer : @storage
                        # if ~ (self.data.balances.contains(params.toAddr)): # @parameter%transfer : @storage
                        SWAP;       # @storage : @parameter%transfer
                        DUP;        # @storage : @storage : @parameter%transfer
                        DUG 2;      # @storage : @parameter%transfer : @storage
                        CAAADR;     # big_map address (pair (int %balance) (bool %lock)) : @parameter%transfer : @storage
                        SWAP;       # @parameter%transfer : big_map address (pair (int %balance) (bool %lock)) : @storage
                        DUP;        # @parameter%transfer : @parameter%transfer : big_map address (pair (int %balance) (bool %lock)) : @storage
                        DUG 2;      # @parameter%transfer : big_map address (pair (int %balance) (bool %lock)) : @parameter%transfer : @storage
                        CDDR;       # address : big_map address (pair (int %balance) (bool %lock)) : @parameter%transfer : @storage
                        MEM;        # bool : @parameter%transfer : @storage
                        IF
                          {}
                          {
                            # self.data.balances[params.toAddr] = sp.record(balance = 0, lock = False) # @parameter%transfer : @storage
                            SWAP;       # @storage : @parameter%transfer
                            DUP;        # @storage : @storage : @parameter%transfer
                            DUG 2;      # @storage : @parameter%transfer : @storage
                            DUP;        # @storage : @storage : @parameter%transfer : @storage
                            CDR;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage : @parameter%transfer : @storage
                            SWAP;       # @storage : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                            CAR;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                            DUP;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                            CDR;        # pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                            SWAP;       # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                            CAR;        # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                            DUP;        # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                            CDR;        # pair (int %circulatingSupply) (address %covir) : pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                            SWAP;       # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                            CAR;        # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                            DUP;        # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                            CAR;        # address : pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                            SWAP;       # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                            CDR;        # big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                            PUSH (option (pair (int %balance) (bool %lock))) (Some (Pair 0 False)); # option (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                            DIG 6;      # @parameter%transfer : option (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                            DUP;        # @parameter%transfer : @parameter%transfer : option (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                            DUG 7;      # @parameter%transfer : option (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                            CDDR;       # address : option (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                            UPDATE;     # big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                            SWAP;       # address : big_map address (pair (int %balance) (bool %lock)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                            PAIR;       # pair address (big_map address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                            PAIR;       # pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                            PAIR;       # pair (pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                            PAIR;       # pair (pair (pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%transfer : @storage
                            DUG 2;      # @parameter%transfer : @storage : pair (pair (pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            SWAP;       # @storage : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            DROP;       # @parameter%transfer : pair (pair (pair (pair address (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                          }; # @parameter%transfer : @storage
                        # self.data.balances[params.fromAddr].balance -= params.amount # @parameter%transfer : @storage
                        SWAP;       # @storage : @parameter%transfer
                        DUP;        # @storage : @storage : @parameter%transfer
                        DUG 2;      # @storage : @parameter%transfer : @storage
                        DUP;        # @storage : @storage : @parameter%transfer : @storage
                        CDR;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage : @parameter%transfer : @storage
                        SWAP;       # @storage : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        CAR;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        DUP;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        CDR;        # pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        SWAP;       # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        CAR;        # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        DUP;        # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        CDR;        # pair (int %circulatingSupply) (address %covir) : pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        SWAP;       # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        CAR;        # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        DUP;        # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        CAR;        # address : pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        SWAP;       # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        CDR;        # big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        DUP;        # big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        DIG 6;      # @parameter%transfer : big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                        DUP;        # @parameter%transfer : @parameter%transfer : big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                        DUG 7;      # @parameter%transfer : big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        CDAR;       # address : big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        DUP;        # address : address : big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        DUG 2;      # address : big_map address (pair (int %balance) (bool %lock)) : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        GET;        # option (pair (int %balance) (bool %lock)) : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        IF_SOME
                          {
                            # of_some: set_in_top-any # @some : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                          }
                          {
                            PUSH string "set_in_top-any"; # string : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                            FAILWITH;   # FAILED
                          }; # @some : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        CDR;        # bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        DIG 7;      # @parameter%transfer : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                        DUP;        # @parameter%transfer : @parameter%transfer : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                        DUG 8;      # @parameter%transfer : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        CAR;        # int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        DIG 9;      # @storage : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer
                        DUP;        # @storage : @storage : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer
                        DUG 10;     # @storage : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        CAAADR;     # big_map address (pair (int %balance) (bool %lock)) : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        DIG 9;      # @parameter%transfer : big_map address (pair (int %balance) (bool %lock)) : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                        DUP;        # @parameter%transfer : @parameter%transfer : big_map address (pair (int %balance) (bool %lock)) : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                        DUG 10;     # @parameter%transfer : big_map address (pair (int %balance) (bool %lock)) : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        CDAR;       # address : big_map address (pair (int %balance) (bool %lock)) : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        GET;        # option (pair (int %balance) (bool %lock)) : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        IF_SOME
                          {
                            # of_some: Get-item:10 # @some : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                          }
                          {
                            PUSH string "Get-item:10"; # string : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                            FAILWITH;   # FAILED
                          }; # @some : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        CAR;        # int : int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        SUB;        # int : bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        PAIR;       # pair int bool : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        SOME;       # option (pair int bool) : address : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        SWAP;       # address : option (pair int bool) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        UPDATE;     # big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        SWAP;       # address : big_map address (pair int bool) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        PAIR;       # pair address (big_map address (pair int bool)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        PAIR;       # pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        PAIR;       # pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : @storage
                        PAIR;       # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%transfer : @storage
                        DUG 2;      # @parameter%transfer : @storage : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # @storage : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DROP;       # @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        # self.data.balances[params.toAddr].balance += params.amount # @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%transfer
                        DUP;        # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%transfer
                        DUG 2;      # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUP;        # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CDR;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CAR;        # pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUP;        # pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CDR;        # pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CAR;        # pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUP;        # pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CDR;        # pair (int %circulatingSupply) (address %covir) : pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CAR;        # pair address (big_map address (pair int bool)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUP;        # pair address (big_map address (pair int bool)) : pair address (big_map address (pair int bool)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CAR;        # address : pair address (big_map address (pair int bool)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # pair address (big_map address (pair int bool)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CDR;        # big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUP;        # big_map address (pair int bool) : big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DIG 6;      # @parameter%transfer : big_map address (pair int bool) : big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUP;        # @parameter%transfer : @parameter%transfer : big_map address (pair int bool) : big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUG 7;      # @parameter%transfer : big_map address (pair int bool) : big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CDDR;       # address : big_map address (pair int bool) : big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUP;        # address : address : big_map address (pair int bool) : big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUG 2;      # address : big_map address (pair int bool) : address : big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        GET;        # option (pair int bool) : address : big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        IF_SOME
                          {
                            # of_some: set_in_top-any # @some : address : big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                          }
                          {
                            PUSH string "set_in_top-any"; # string : address : big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            FAILWITH;   # FAILED
                          }; # @some : address : big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CDR;        # bool : address : big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DIG 7;      # @parameter%transfer : bool : address : big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUP;        # @parameter%transfer : @parameter%transfer : bool : address : big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUG 8;      # @parameter%transfer : bool : address : big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CAR;        # int : bool : address : big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DIG 9;      # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : int : bool : address : big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer
                        DUP;        # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : int : bool : address : big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer
                        DUG 10;     # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : int : bool : address : big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CAAADR;     # big_map address (pair int bool) : int : bool : address : big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DIG 9;      # @parameter%transfer : big_map address (pair int bool) : int : bool : address : big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUP;        # @parameter%transfer : @parameter%transfer : big_map address (pair int bool) : int : bool : address : big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUG 10;     # @parameter%transfer : big_map address (pair int bool) : int : bool : address : big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CDDR;       # address : big_map address (pair int bool) : int : bool : address : big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        GET;        # option (pair int bool) : int : bool : address : big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        IF_SOME
                          {
                            # of_some: Get-item:13 # @some : int : bool : address : big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                          }
                          {
                            PUSH string "Get-item:13"; # string : int : bool : address : big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                            FAILWITH;   # FAILED
                          }; # @some : int : bool : address : big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        CAR;        # int : int : bool : address : big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        ADD;        # int : bool : address : big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        PAIR;       # pair int bool : address : big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SOME;       # option (pair int bool) : address : big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # address : option (pair int bool) : big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        UPDATE;     # big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        SWAP;       # address : big_map address (pair int bool) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        PAIR;       # pair address (big_map address (pair int bool)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        PAIR;       # pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        PAIR;       # pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        PAIR;       # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DUG 2;      # @parameter%transfer : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DROP 2;     # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                      }
                      {
                        # Entry point: unlockAddress # @parameter%unlockAddress : @storage
                        # sp.verify(sp.sender == self.data.administrator) # @parameter%unlockAddress : @storage
                        SWAP;       # @storage : @parameter%unlockAddress
                        DUP;        # @storage : @storage : @parameter%unlockAddress
                        DUG 2;      # @storage : @parameter%unlockAddress : @storage
                        CAAAAR;     # address : @parameter%unlockAddress : @storage
                        SENDER;     # address : address : @parameter%unlockAddress : @storage
                        COMPARE;    # int : @parameter%unlockAddress : @storage
                        EQ;         # bool : @parameter%unlockAddress : @storage
                        IF
                          {}
                          {
                            PUSH string "WrongCondition: sp.sender == self.data.administrator"; # string : @parameter%unlockAddress : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%unlockAddress : @storage
                        # sp.verify(self.data.balances.contains(params.address)) # @parameter%unlockAddress : @storage
                        SWAP;       # @storage : @parameter%unlockAddress
                        DUP;        # @storage : @storage : @parameter%unlockAddress
                        DUG 2;      # @storage : @parameter%unlockAddress : @storage
                        CAAADR;     # big_map address (pair (int %balance) (bool %lock)) : @parameter%unlockAddress : @storage
                        SWAP;       # @parameter%unlockAddress : big_map address (pair (int %balance) (bool %lock)) : @storage
                        DUP;        # @parameter%unlockAddress : @parameter%unlockAddress : big_map address (pair (int %balance) (bool %lock)) : @storage
                        DUG 2;      # @parameter%unlockAddress : big_map address (pair (int %balance) (bool %lock)) : @parameter%unlockAddress : @storage
                        MEM;        # bool : @parameter%unlockAddress : @storage
                        IF
                          {}
                          {
                            PUSH string "WrongCondition: self.data.balances.contains(params.address)"; # string : @parameter%unlockAddress : @storage
                            FAILWITH;   # FAILED
                          }; # @parameter%unlockAddress : @storage
                        # self.data.balances[params.address].lock = False # @parameter%unlockAddress : @storage
                        SWAP;       # @storage : @parameter%unlockAddress
                        DUP;        # @storage : @storage : @parameter%unlockAddress
                        DUG 2;      # @storage : @parameter%unlockAddress : @storage
                        DUP;        # @storage : @storage : @parameter%unlockAddress : @storage
                        CDR;        # pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage : @parameter%unlockAddress : @storage
                        SWAP;       # @storage : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%unlockAddress : @storage
                        CAR;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%unlockAddress : @storage
                        DUP;        # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%unlockAddress : @storage
                        CDR;        # pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%unlockAddress : @storage
                        SWAP;       # pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%unlockAddress : @storage
                        CAR;        # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%unlockAddress : @storage
                        DUP;        # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%unlockAddress : @storage
                        CDR;        # pair (int %circulatingSupply) (address %covir) : pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%unlockAddress : @storage
                        SWAP;       # pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%unlockAddress : @storage
                        CAR;        # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%unlockAddress : @storage
                        DUP;        # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%unlockAddress : @storage
                        CAR;        # address : pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%unlockAddress : @storage
                        SWAP;       # pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock))) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%unlockAddress : @storage
                        CDR;        # big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%unlockAddress : @storage
                        DUP;        # big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%unlockAddress : @storage
                        DIG 6;      # @parameter%unlockAddress : big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                        DUP;        # @parameter%unlockAddress : @parameter%unlockAddress : big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @storage
                        DUG 7;      # @parameter%unlockAddress : big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%unlockAddress : @storage
                        DUP;        # @parameter%unlockAddress : @parameter%unlockAddress : big_map address (pair (int %balance) (bool %lock)) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%unlockAddress : @storage
                        DUG 2;      # @parameter%unlockAddress : big_map address (pair (int %balance) (bool %lock)) : @parameter%unlockAddress : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%unlockAddress : @storage
                        GET;        # option (pair (int %balance) (bool %lock)) : @parameter%unlockAddress : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%unlockAddress : @storage
                        IF_SOME
                          {
                            # of_some: set_in_top-any # @some : @parameter%unlockAddress : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%unlockAddress : @storage
                          }
                          {
                            PUSH string "set_in_top-any"; # string : @parameter%unlockAddress : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%unlockAddress : @storage
                            FAILWITH;   # FAILED
                          }; # @some : @parameter%unlockAddress : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%unlockAddress : @storage
                        CAR;        # int : @parameter%unlockAddress : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%unlockAddress : @storage
                        PUSH bool False; # bool : int : @parameter%unlockAddress : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%unlockAddress : @storage
                        SWAP;       # int : bool : @parameter%unlockAddress : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%unlockAddress : @storage
                        PAIR;       # pair int bool : @parameter%unlockAddress : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%unlockAddress : @storage
                        SOME;       # option (pair int bool) : @parameter%unlockAddress : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%unlockAddress : @storage
                        SWAP;       # @parameter%unlockAddress : option (pair int bool) : big_map address (pair (int %balance) (bool %lock)) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%unlockAddress : @storage
                        UPDATE;     # big_map address (pair int bool) : address : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%unlockAddress : @storage
                        SWAP;       # address : big_map address (pair int bool) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%unlockAddress : @storage
                        PAIR;       # pair address (big_map address (pair int bool)) : pair (int %circulatingSupply) (address %covir) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%unlockAddress : @storage
                        PAIR;       # pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir)) : pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%unlockAddress : @storage
                        PAIR;       # pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio))) : pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))) : @parameter%unlockAddress : @storage
                        PAIR;       # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus)))) : @parameter%unlockAddress : @storage
                        DUG 2;      # @parameter%unlockAddress : @storage : pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                        DROP 2;     # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                      }; # pair (pair (pair (pair address (big_map address (pair int bool))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
                  }; # pair (pair (pair (pair @parameter%setAdministrator (big_map address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
              }; # pair (pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair bool int)) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
            NIL operation; # list operation : pair (pair (pair (pair (address %administrator) (big_map %balances address (pair (int %balance) (bool %lock)))) (pair (int %circulatingSupply) (address %covir))) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair bool int)) (pair (pair (int %supplyLimit) (string %tokenName)) (pair (string %tokenSymbol) (bool %transferStatus))))
          }; # list operation : @storage
      }; # list operation : pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair int string) (pair (string %tokenSymbol) (bool %transferStatus))))
    PAIR;       # pair (list operation) (pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair int string) (pair (string %tokenSymbol) (bool %transferStatus)))))
  } # pair (list operation) (pair (pair (pair (pair address (big_map address (pair int bool))) (pair int address)) (pair (pair (int %factor) (address %octopus)) (pair (address %owner) (int %ratio)))) (pair (pair (pair (int %saleLimit) (address %saleManager)) (pair (bool %saleStatus) (int %soldToken))) (pair (pair int string) (pair (string %tokenSymbol) (bool %transferStatus)))));
